Skip to content
Search or jump to…

Pull requests
Issues
Marketplace
Explore
 
@dinakardinu 
Learn Git and GitHub without any code!
Using the Hello World guide, you’ll start a branch, write comments, and open a pull request.


RameshMF
/
object-oriented-design
4
1214
 Code Issues 0 Pull requests 0 Actions Projects 0 Security Insights
Project of Oops concepts nad oops principles

 master
Ramesh FadatareRamesh Fadatare
Ramesh Fadatare authored and Ramesh Fadatare committed on May 28, 2018
0 parents commit cf5ea46f022892cc11b8983b03f919cadb03f158
Showing  with 3,622 additions and 0 deletions.
 36  oops-concepts/.classpath 
@@ -0,0 +1,36 @@
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" output="target/classes" path="src/main/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/jdk1.8.0_92">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="output" path="target/classes"/>
</classpath>
 23  oops-concepts/.project 
@@ -0,0 +1,23 @@
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>ood-concepts</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.m2e.core.maven2Builder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jdt.core.javanature</nature>
		<nature>org.eclipse.m2e.core.maven2Nature</nature>
	</natures>
</projectDescription>
 13  oops-concepts/.settings/org.eclipse.jdt.core.prefs 
@@ -0,0 +1,13 @@
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.5
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.compliance=1.8
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
org.eclipse.jdt.core.compiler.source=1.5
 4  oops-concepts/.settings/org.eclipse.m2e.core.prefs 
@@ -0,0 +1,4 @@
activeProfiles=
eclipse.preferences.version=1
resolveWorkspaceProjects=true
version=1
 BIN +17 KB oops-concepts/images/Cohesion.png 
Binary file not shown.
 BIN +8.52 KB oops-concepts/images/Hierarchical Inheritance.png 
Binary file not shown.
 BIN +11 KB oops-concepts/images/Hybrid Inheritance.png 
Binary file not shown.
 1  oops-concepts/images/Hybrid Inheritance.xml 
@@ -0,0 +1 @@
<mxfile userAgent="Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/66.0.3359.139 Safari/537.36" version="8.6.2" editor="www.draw.io" type="device"><diagram id="ab2a4e55-3f35-fd10-bc39-bf803acadab4" name="Page-1">ddHBEoIgEADQr+GOMKV3s7p08tCZAJUJXQdxtL4+DcwYiwMDb3dZBhBN6/FkWFtdQEiNCBYjogdESJzsp3mGhwO6jx2URglH0Qq5ekqP2GuvhOyCRAugrWpD5NA0ktvAmDEwhGkF6LBry0q5gZwzvdWrErZymuzw6mepymrpHGEfuTF+Lw30je+HCC3ew4Vrtpzl87uKCRi+iGaIpgbAulU9plLPT7s8m6s7/ol+7m1kY38UTIv17GkT/B/NXg==</diagram></mxfile> 
 BIN +6.46 KB oops-concepts/images/Multilevel Inheritance.png 
Binary file not shown.
 BIN +4.03 KB oops-concepts/images/Single Inheritance.png 
Binary file not shown.
 BIN +16.5 KB oops-concepts/images/abstraction.png 
Binary file not shown.
 BIN +6.43 KB oops-concepts/images/aggregation (1).png 
Binary file not shown.
 BIN +6.12 KB oops-concepts/images/aggregation.png 
Binary file not shown.
 BIN +3.31 KB oops-concepts/images/association (1).png 
Binary file not shown.
 BIN +3.09 KB oops-concepts/images/association.png 
Binary file not shown.
 BIN +14.3 KB oops-concepts/images/composition (1).png 
Binary file not shown.
 BIN +13.9 KB oops-concepts/images/coupling.png 
Binary file not shown.
 BIN +13.7 KB oops-concepts/images/encapsulation.png 
Binary file not shown.
 BIN +12.3 KB oops-concepts/images/inheritance-java-core.png 
Binary file not shown.
 BIN +8.39 KB oops-concepts/images/multiple inheritance.png 
Binary file not shown.
 BIN +6.59 KB oops-concepts/images/runtime-poly.png 
Binary file not shown.
 9  oops-concepts/pom.xml 
@@ -0,0 +1,9 @@
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.ramesh.ood</groupId>
    <artifactId>object-oriented-design</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>oops-concepts</artifactId>
</project> 
 89  oops-concepts/src/main/java/com/ramesh/ood/concepts/abstraction/Abstraction.java 
@@ -0,0 +1,89 @@
package com.ramesh.ood.concepts.abstraction;

//---------------------------------------
//--- STEP 00 - WHAT IS ABSTRACTION & ENCAPSULATION? 
//---------------------------------------

///** 
// * Abstraction = Looking only at the information that is relevant at the time. 
// *
// * Abstraction is the process or result of generalization by reducing the information content of a concept or an observable phenomenon, 
// * typically in order to retain only information which is relevant for a particular purpose. It is starting point of design.
// * Functional abstraction - means that a function can be used without taking into account how the function is implemented. 
// * Data Abstraction - means that data can be used without taking into account how the data are stored.
// */

///**
// * Encapsulation = Data hiding mechanism.
// *
// * The process of binding or wrapping the data and the codes that operates on the data into a single entity. This keeps the data safe from 
// * outside interface and misuse. One way to think about encapsulation is as a protective wrapper that prevents code and data from being arbitrarily 
// * accessed by other code defined outside the wrapper. 
// * For example - if a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. 
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND ENCAPSULATION BY EXAMPLE
//---------------------------------------

/**
 * 
 * Encapsulation goals of Person class
 * 
 * (1) The id and name parameters should not be accessible directly outside Person class - achieved by private declaration
 * 
 * (2) The id value can be assigned in Person class only and other class should not be able to change - not included setId() method
 * 
 * 
 */
class Person {

	private double id;
	private String name;

	public Person() {
		// Only Person class can access and assign
		id = Math.random();
		sayHello();
	}

	// This method is protected for giving access within Person class only
	private void sayHello() {
		System.out.println("Hello - " + getId());
	}

	public double getId() {
		return id;
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
}

/**
 * Test class for Person
 * 
 * @author tirthalp
 * 
 */
public class Abstraction {

	public static void main(String[] args) {

		Person p1 = new Person();
		p1.setName("Tirthal");
		/*
		 * Note: As id and name are encapsulated in Person class, those cannot be accessed directly here. Also there is no way to assign id in this
		 * class. Try to uncomment below code and you would find compile time error.
		 */
		// p1.id = "123";
		// p1.name = "this will give compile time error";
		// p1.sayHello(); // You can't access this method, as it is private to Person

		System.out.println("Person 1 - " + p1.getId() + " : " + p1.getName());
	}
} 
 19  oops-concepts/src/main/java/com/ramesh/ood/concepts/abstraction/Contractor.java 
@@ -0,0 +1,19 @@
package com.ramesh.ood.concepts.abstraction;

/**
 * The Contractor class inherits all properties from its parent Employee but have to provide it’s own implementation to calculateSalary() method. In this case we multiply the value of payment per hour with given working hours.
 * @author RAMESH
 *
 */
public class Contractor extends Employee {

	private int workingHours;
	public Contractor(String name, int paymentPerHour, int workingHours) {
		super(name, paymentPerHour);
		this.workingHours = workingHours;
	}
	@Override
	public int calculateSalary() {
		return getPaymentPerHour() * workingHours;
	}
} 
 31  oops-concepts/src/main/java/com/ramesh/ood/concepts/abstraction/Employee.java 
@@ -0,0 +1,31 @@
package com.ramesh.ood.concepts.abstraction;

/**
 * Lets first create the superclass Employee. Note the usage of abstract keyword in class definition. This marks the class to be abstract, which means it can not be instantiated directly. We define a method called calculateSalary() as an abstract method. This way you leave the implementation of this method to the inheritors of the Employee class.
 * @author RAMESH
 *
 */
public abstract class Employee {

	private String name;
	private int paymentPerHour;

	public Employee(String name, int paymentPerHour) {
		this.name = name;
		this.paymentPerHour = paymentPerHour;
	}

	public abstract int calculateSalary();
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public int getPaymentPerHour() {
		return paymentPerHour;
	}
	public void setPaymentPerHour(int paymentPerHour) {
		this.paymentPerHour = paymentPerHour;
	}
} 
 16  oops-concepts/src/main/java/com/ramesh/ood/concepts/abstraction/FullTimeEmployee.java 
@@ -0,0 +1,16 @@
package com.ramesh.ood.concepts.abstraction;

/**
 * The FullTimeEmployee also has it’s own implementation ofcalculateSalary()method. In this case we just multiply by constant 8 hours.
 * @author RAMESH
 *
 */
public class FullTimeEmployee extends Employee {
	public FullTimeEmployee(String name, int paymentPerHour) {
		super(name, paymentPerHour);
	}
	@Override
	public int calculateSalary() {
		return getPaymentPerHour() * 8;
	}
}
 110  oops-concepts/src/main/java/com/ramesh/ood/concepts/aggregation/Aggregation.java 
@@ -0,0 +1,110 @@
package com.ramesh.ood.concepts.aggregation;

import java.util.ArrayList;
import java.util.List;
// Aggregation = HAS-A Relationship.
// Aggregation is an association represents a part of a whole relationship where a part can exist without a whole.
// It has a weaker relationship. For example, If line-item HAS-A product, then a line item is a whole and product is a part.
// If a line item is deleted, then corresponding product needs not to be deleted.

public class Aggregation {
	public static void main(String[] args) {
		// Create Products
		Product p1 = new Product(1, "Pen", "This is red pen");
		Product p2 = new Product(2, "Pencil", "This is pencil");
		Product p3 = new Product(3, "ColorBox", "This is color box");

		// Create lineItem and add quntity of the products
		LineItem item1 = new LineItem(1, 2, p1);
		LineItem item2 = new LineItem(1, 2, p2);
		LineItem item3 = new LineItem(1, 2, p3);

		// Before deleting line item 1 
		System.out.println(item1.getId());
		System.out.println(item1.getQuantity());
		System.out.println(item1.getP());
		item1 = null;

		// Still product exist and not deleted
		System.out.println(p1);
	}
}

/**
 * This is Product class
 * 
 */
class Product {
	private int id;
	private String name;
	private String description;

	public Product(int id, String name, String description) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", description=" + description + "]";
	}
}

/**
 * This is LineItem class, which HAS-A aggregation association with Product class. That means, if you delete LineItem, then associated Product can
 * exist.
 * 
 */
class LineItem {
	private int id;
	private int quantity;
	private Product p;

	public LineItem(int id, int quantity, Product p) {
		super();
		this.id = id;
		this.quantity = quantity;
		this.p = p;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getQuantity() {
		return quantity;
	}
	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	public Product getP() {
		return p;
	}
	public void setP(Product p) {
		this.p = p;
	}
	@Override
	public String toString() {
		return "LineItem [id=" + id + ", quantity=" + quantity + ", p=" + p + "]";
	}
}
 183  oops-concepts/src/main/java/com/ramesh/ood/concepts/composition/Composition.java 
@@ -0,0 +1,183 @@
package com.ramesh.ood.concepts.composition;

import java.util.ArrayList;
import java.util.List;

//---------------------------------------
//--- STEP 00 - WHAT IS AGGREGATION & COMPOSITION? 
//---------------------------------------

///**
// * Aggregation = HAS-A Relationship.
// *
// * Aggregation is an association represents a part of a whole relationship where a part can exist without a whole.
// * It has a weaker relationship. For example, If line-item HAS-A product, then a line item is a whole and product is a part. 
// * If a line item is deleted, then corresponding product needs not to be deleted.
// */

///**
// * Composition = HAS-A relationship, but restricted form of Aggregation 
// *
// * Composition is an association represents a part of a whole relationship where a part cannot exist without a whole. If a whole is deleted then 
// * all parts are deleted. It has a stronger relationship. For example, if order HAS-A line-items, then an order is a whole and line items are parts. 
// * If an order is deleted then all corresponding line items for that order should be deleted.
// */

/**
 * This is test class for aggregation and composition example
 * 
 */
public class Composition {
	public static void main(String[] args) {
		// Create Products
		Product p1 = new Product(1, "Pen", "This is red pen");
		Product p2 = new Product(2, "Pencil", "This is pencil");
		Product p3 = new Product(3, "ColorBox", "This is color box");

		// Create Order and Add Line Items
		Order o = new Order(1, "ORD#1");
		o.addItem(1, 2, p1); // Ordered of 2 quantity for p1 product
		o.addItem(2, 1, p2); // Ordered of 1 quantity for p2 product
		o.addItem(3, 5, p3); // Ordered of 5 quantity for p3 product		
		// Print Order detail before deleting 
		System.out.println("Order ---");
		System.out.println(o);
		// Deleting order would also delete associated LineItems ------- Represents Composition relationship between Order and LineItem			
		o = null;		
		// Line items are deleted, but associated products can still exist -------- Represents Aggregation relationship between LineItem and Product				
		System.out.println("Products ---");
		System.out.println(p1);
		System.out.println(p2);
		System.out.println(p3);
	}
}

/**
 * This is Product class
 * 
 * @author tirthalp
 * 
 */
class Product {
	private int id;
	private String name;
	private String description;

	public Product(int id, String name, String description) {
		super();
		this.id = id;
		this.name = name;
		this.description = description;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getDescription() {
		return description;
	}
	public void setDescription(String description) {
		this.description = description;
	}
	@Override
	public String toString() {
		return "Product [id=" + id + ", name=" + name + ", description=" + description + "]";
	}
}

/**
 * This is LineItem class, which HAS-A aggregation association with Product class. That means, if you delete LineItem, then associated Product can
 * exist.
 * 
 * @author tirthalp
 * 
 */
class LineItem {
	private int id;
	private int quantity;
	private Product p;

	public LineItem(int id, int quantity, Product p) {
		super();
		this.id = id;
		this.quantity = quantity;
		this.p = p;
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public int getQuantity() {
		return quantity;
	}
	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}
	public Product getP() {
		return p;
	}
	public void setP(Product p) {
		this.p = p;
	}
	@Override
	public String toString() {
		return "LineItem [id=" + id + ", quantity=" + quantity + ", p=" + p + "]";
	}
}

/**
 * This is Order class, which HAS-A composition association with LineItem class. That means if you delete Order, then associated all LineItem must be
 * deleted.
 * 
 * @author tirthalp
 * 
 */
class Order {
	private int id;
	private String name;
	private List<LineItem> lineItems;

	public Order(int id, String name) {
		super();
		this.id = id;
		this.name = name;
		this.lineItems = new ArrayList<LineItem>();
	}
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Order [id=" + id + ", name=" + name + ", lineItems=" + lineItems + "]";
	}

	// Add line item to order
	public void addItem(int id, int quantity, Product p) {
		this.lineItems.add(new LineItem(id, quantity, p));
	}

	// Remove line item from order for given item id
	public void removeItemById(int itemId) {
		// TODO - Not implemented yet
	}
} 
 90  oops-concepts/src/main/java/com/ramesh/ood/concepts/delegation/Delegation.java 
@@ -0,0 +1,90 @@
package com.ramesh.ood.concepts.delegation;

//---------------------------------------
//--- STEP 00 - WHAT IS DELEGATION? 
//---------------------------------------

///**
// * Delegation = hand over the responsibility for a particular task to another class or method. 
// *
// * If you need to use functionality in another class but you do not want to change that functionality then use delegation instead of inheritance.
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND DELEGATION (ALONG WITH POLYMORPHISM) BY EXAMPLE
//---------------------------------------

/**
 * This is test class for the delegation and polymorphism example
 * 
 * 
 */
public class Delegation {

	public static void main(String[] args) {
		// Here TicketBookingByAgent class is internally delegating train ticket booking responsibility to other class
		TicketBookingByAgent agent = new TicketBookingByAgent(new TrainBooking());
		agent.bookTicket();

		// Here TicketBookingByAgent class is internally delegating airline ticket booking responsibility to other class
		agent = new TicketBookingByAgent(new AirBooking());
		agent.bookTicket();
	}
}

/**
 * TicketBokkingByAgent provides implementation of TravelBooking. But it delegates actual ticket booking to other class at runtime using Polymorphism.
 * 
 * @author tirthalp
 * 
 */
class TicketBookingByAgent implements TravelBooking {

	TravelBooking t;

	public TicketBookingByAgent(TravelBooking t) {
		this.t = t;
	}

	// Delegation --- Here ticket booking responsibility is delegated to other class using polymorphism
	@Override
	public void bookTicket() {
		t.bookTicket();
	}
}

/**
 * This represents TravelBooking interface
 * 
 * @author tirthalp
 * 
 */
interface TravelBooking {
	public void bookTicket();
}

/**
 * TrainBooking IS-A TravelBooking type
 * 
 * @author tirthalp
 * 
 */
class TrainBooking implements TravelBooking {
	@Override
	public void bookTicket() {
		System.out.println("Train ticket booked");
	}
}

/**
 * AirBooking IS-A TravelBooking type
 * 
 * @author tirthalp
 * 
 */
class AirBooking implements TravelBooking {
	@Override
	public void bookTicket() {
		System.out.println("Flight ticket booked");
	}
} 
 89  oops-concepts/src/main/java/com/ramesh/ood/concepts/encapsulation/Encapsulation.java 
@@ -0,0 +1,89 @@
package com.ramesh.ood.concepts.encapsulation;

//---------------------------------------
//--- STEP 00 - WHAT IS ABSTRACTION & ENCAPSULATION? 
//---------------------------------------

///** 
// * Abstraction = Looking only at the information that is relevant at the time. 
// *
// * Abstraction is the process or result of generalization by reducing the information content of a concept or an observable phenomenon, 
// * typically in order to retain only information which is relevant for a particular purpose. It is starting point of design.
// * Functional abstraction - means that a function can be used without taking into account how the function is implemented. 
// * Data Abstraction - means that data can be used without taking into account how the data are stored.
// */

///**
// * Encapsulation = Data hiding mechanism.
// *
// * The process of binding or wrapping the data and the codes that operates on the data into a single entity. This keeps the data safe from 
// * outside interface and misuse. One way to think about encapsulation is as a protective wrapper that prevents code and data from being arbitrarily 
// * accessed by other code defined outside the wrapper. 
// * For example - if a field is declared private, it cannot be accessed by anyone outside the class, thereby hiding the fields within the class. 
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND ENCAPSULATION BY EXAMPLE
//---------------------------------------

/**
 * 
 * Encapsulation goals of Person class
 * 
 * (1) The id and name parameters should not be accessible directly outside Person class - achieved by private declaration
 * 
 * (2) The id value can be assigned in Person class only and other class should not be able to change - not included setId() method
 * 
 * 
 */
class Person {

	private double id;
	private String name;

	public Person() {
		// Only Person class can access and assign
		id = Math.random();
		sayHello();
	}

	// This method is protected for giving access within Person class only
	private void sayHello() {
		System.out.println("Hello - " + getId());
	}

	public double getId() {
		return id;
	}

	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
}

/**
 * Test class for Person
 * 
 * @author tirthalp
 * 
 */
public class Encapsulation {

	public static void main(String[] args) {

		Person p1 = new Person();
		p1.setName("Tirthal");
		/*
		 * Note: As id and name are encapsulated in Person class, those cannot be accessed directly here. Also there is no way to assign id in this
		 * class. Try to uncomment below code and you would find compile time error.
		 */
		// p1.id = "123";
		// p1.name = "this will give compile time error";
		// p1.sayHello(); // You can't access this method, as it is private to Person

		System.out.println("Person 1 - " + p1.getId() + " : " + p1.getName());
	}
} 
 72  oops-concepts/src/main/java/com/ramesh/ood/concepts/inheritance/Inheritance.java 
@@ -0,0 +1,72 @@
package com.ramesh.ood.concepts.inheritance;

//---------------------------------------
//--- STEP 00 - WHAT IS INHERITANCE? 
//---------------------------------------

///**
// * Inheritance = is-a relationship between a superclass and its subclasses. 
// *
// * For example, Dog (subclass) is-a of type Animal (superclass). So Dog can inherit (reuse) members of Animal class; 
// * plus it can have its own new behavior and properties.  
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND INHERITANCE BY EXAMPLE
//---------------------------------------

/**
 * Test class for inheritance behavior - Dog class is inheriting behavior and properties of Animal class and can have its own too.
 * 
 * 
 */
public class Inheritance {

	public static void main(String[] args) {
		Dog dog = new Dog();
		dog.setId(123); // inherited from super class
		dog.sound(); // overrided behavior of sub class
	}
}

/**
 * This is parent (also called as super or base) class Animal
 * 
 * @author tirthalp
 * 
 */
class Animal {
	int id;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public void sound() {
		System.out.println("By default it is mute");
	}
}

/**
 * This is subclass (also called as derived or child or extended) Dog which is extending Animal
 * 
 * @author tirthalp
 * 
 */
class Dog extends Animal {

	// Own behavior
	private void bark() {
		System.out.println("Dog '" + getId() + "' is barking");
	}

	// Overriding super class behavior
	@Override
	public void sound() {
		bark();
	}
} 
 119  oops-concepts/src/main/java/com/ramesh/ood/concepts/loosecoupling/LooseCoupling.java 
@@ -0,0 +1,119 @@
package com.ramesh.ood.concepts.loosecoupling;

//---------------------------------------
//--- STEP 00 - WHAT IS LOOSE COUPLING? 
//---------------------------------------

///**
// * Loose Coupling = Low dependencies between “artifacts” (classes, modules, components).
// * 
// * Avoid tight-coupling for collaboration between two classes (if one class wants to call the logic of a second class, then they first class needs an
// * object of second class it means the first class creates an object of second class).
// * 
// * Strive for loosely coupled design between objects that interact.
// * 
// * Inversion Of Control (IoC) / Dependency Injection (DI) - With DI objects are given their dependencies at creation time by some third party (i.e.
// * Java EE CDI, Spring DI…) that coordinates each object in the system. Objects aren’t expected to create or obtain their dependencies—dependencies
// * are injected into the objects that need them. The key benefit of DI—loose coupling.
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND LOOSE COUPLING BY EXAMPLE
//---------------------------------------

/**
 * Test class for loose coupling example - BadTraveler is example of tight coupling and GoodTraveler is example of loose coupling
 * 
 * @author tirthalp
 * 
 */
public class LooseCoupling {

	public static void main(String[] args) {
		// Example of tight coupling - To change journey from Car to Bike, it requires changes in BadTraveler class
		BadTraveler bt = new BadTraveler();
		bt.startJourney();
		// Example of loose coupling - To change journey from Car to Bike, it is possible without changing GoodTraveler class
		GoodTraveler gt = new GoodTraveler();
		gt.setV(new Car()); // Inject Car dependency
		gt.startJourney(); // start journey by Car
		gt.setV(new Bike()); // Inject Bike dependency
		gt.startJourney(); // Start journey by Bike
	}
}

/**
 * This is example of tight coupling. Here to start journey, the BadTraveler class is creating Car object to interact with it using move() method.
 * Hence both are tightly coupled. Now if there is a need to change journey from Car to Bike, then it requires to do changes in BadTraveler class
 * (i.e. replace Car object with Bike object). Hence tight coupling should be avoided.
 * 
 * @author tirthalp
 * 
 */
class BadTraveler {

	Car c = new Car();

	public void startJourney() {
		c.move();
	}
}

/**
 * This is example of loose coupling. In this class, it is not tightly coupled with Car or Bike implementation. Instead by applying dependency
 * injection mechanism, the loose coupling implementation is achieved to allow start journey with any class which has implemented Vehicle interface.
 * 
 * @author tirthalp
 * 
 */
class GoodTraveler {
	private Vehicle v;

	public Vehicle getV() {
		return v;
	}

	public void setV(Vehicle v) {
		this.v = v;
	}

	public void startJourney() {
		v.move();
	}
}

/**
 * Vehicle interface to allow loose coupling implementation
 * 
 * @author tirthalp
 * 
 */
interface Vehicle {
	public void move();
}

/**
 * Car implements Vehicle interface
 * 
 * @author tirthalp
 * 
 */
class Car implements Vehicle {
	@Override
	public void move() {
		System.out.println("Car is moving");
	}
}

/**
 * Bike implements Vehicle interface
 * 
 * @author tirthalp
 * 
 */
class Bike implements Vehicle {
	@Override
	public void move() {
		System.out.println("Bike is moving");
	}
} 
 95  oops-concepts/src/main/java/com/ramesh/ood/concepts/polymorphism/Polymorphism.java 
@@ -0,0 +1,95 @@
package com.ramesh.ood.concepts.polymorphism;

//---------------------------------------
//--- STEP 00 - WHAT IS POLYMORPHISM? 
//---------------------------------------

///** 
// * Polymorphism = single interface multiple implementations.
// *
// * How Polymorphism is supported in Java? - In terms of interface, inheritance, method overloading and method overriding. 
// * (Method overloading and method overriding uses concept of Polymorphism in Java where method name remains same in two classes, 
// * but actual method called by JVM depends upon object at run time and done by dynamic binding in Java. In case of overloading method 
// * signature changes while in case of overriding method signature remains same and binding and invocation of method is decided on 
// * runtime based on actual object. This facility allows Java programmer to write very flexibly and maintainable code using interfaces 
// * without worrying about concrete implementation. One disadvantage of using Polymorphism in code is that while reading code you don't 
// * know the actual type which annoys while you are looking to find bugs or trying to debug program. But if you do Java debugging in 
// * IDE you will definitely be able to see the actual object and the method call and variable associated with it.)
// *
// * Where to use Polymorphism in code? - You should use super type in method argument, variable name and return type of method.
// *
// * Parameteric Polymorphism in Java - Java started to support parametric polymorphism with introduction of Generic in JDK1.5. Collection 
// * classes in JDK 1.5 are written using Generic Type which allows Collections to hold any type of object in run time without any change 
// * in code and this has been achieved by passing actual Type as parameter. 
// */

//---------------------------------------
//--- STEP 01 - UNDERSTAND POLYMORPHISM BY SIMPLE EXAMPLE
//---------------------------------------

/**
 * Test class - If variable is initialized with super type (Payment), then it gives you flexibility to assign any new implementation of that type
 * (i.e. CashPayment, CreditPayment).
 * 
 * @author tirthalp
 * 
 */
public class Polymorphism {

	public static void main(String[] args) {
		// Here the runtime polymorphism fundamental is not applied, as it is of single CashPayment form
		CashPayment c = new CashPayment();
		c.pay();

		// Now the initialization is done using runtime polymorphism and it can have many forms at runtime
		// Single payment "p" instance can be used to pay by cash and credit card
		Payment p = new CashPayment();
		p.pay(); // Pay by cash

		p = new CreditPayment();
		p.pay(); // Pay by creditcard
	}

}

/**
 * This represents payment interface
 * 
 * @author tirthalp
 * 
 */
interface Payment {
	public void pay();
}

/**
 * Cash IS-A Payment type
 * 
 * @author tirthalp
 * 
 */
class CashPayment implements Payment {

	// method overriding
	@Override
	public void pay() {
		System.out.println("This is cash payment");
	}

}

/**
 * Creditcard IS-A Payment type
 * 
 * @author tirthalp
 * 
 */
class CreditPayment implements Payment {

	// method overriding
	@Override
	public void pay() {
		System.out.println("This is credit card payment");
	}

} 
 5  oops-concepts/target/classes/META-INF/MANIFEST.MF 
@@ -0,0 +1,5 @@
Manifest-Version: 1.0
Built-By: RAMESH
Build-Jdk: 1.8.0_151
Created-By: Maven Integration for Eclipse

 7  oops-concepts/target/classes/META-INF/maven/com.ramesh.ood/oops-concepts/pom.properties 
@@ -0,0 +1,7 @@
#Generated by Maven Integration for Eclipse
#Sun Apr 08 10:51:53 IST 2018
version=0.0.1-SNAPSHOT
groupId=com.ramesh.ood
m2e.projectName=ood-concepts
m2e.projectLocation=E\:\\BLOGGER_WORK\\object-oriented-design\\oops-concepts
artifactId=oops-concepts
 9  oops-concepts/target/classes/META-INF/maven/com.ramesh.ood/oops-concepts/pom.xml 
@@ -0,0 +1,9 @@
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.ramesh.ood</groupId>
    <artifactId>object-oriented-design</artifactId>
    <version>0.0.1-SNAPSHOT</version>
  </parent>
  <artifactId>oops-concepts</artifactId>
</project> 
 BIN +1.03 KB oops-concepts/target/classes/com/ramesh/ood/concepts/abstraction/Abstraction.class 
Binary file not shown.
 BIN +647 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/abstraction/Contractor.class 
Binary file not shown.
 BIN +893 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/abstraction/Employee.class 
Binary file not shown.
 BIN +585 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/abstraction/FullTimeEmployee.class 
Binary file not shown.
 BIN +1.06 KB oops-concepts/target/classes/com/ramesh/ood/concepts/abstraction/Person.class 
Binary file not shown.
 BIN +1.35 KB oops-concepts/target/classes/com/ramesh/ood/concepts/aggregation/Aggregation.class 
Binary file not shown.
 BIN +1.54 KB oops-concepts/target/classes/com/ramesh/ood/concepts/aggregation/LineItem.class 
Binary file not shown.
 BIN +1.37 KB oops-concepts/target/classes/com/ramesh/ood/concepts/aggregation/Product.class 
Binary file not shown.
 BIN +1.31 KB oops-concepts/target/classes/com/ramesh/ood/concepts/composition/Composition.class 
Binary file not shown.
 BIN +1.54 KB oops-concepts/target/classes/com/ramesh/ood/concepts/composition/LineItem.class 
Binary file not shown.
 BIN +1.8 KB oops-concepts/target/classes/com/ramesh/ood/concepts/composition/Order.class 
Binary file not shown.
 BIN +1.37 KB oops-concepts/target/classes/com/ramesh/ood/concepts/composition/Product.class 
Binary file not shown.
 BIN +620 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/delegation/AirBooking.class 
Binary file not shown.
 BIN +839 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/delegation/Delegation.class 
Binary file not shown.
 BIN +648 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/delegation/TicketBookingByAgent.class 
Binary file not shown.
 BIN +623 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/delegation/TrainBooking.class 
Binary file not shown.
 BIN +166 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/delegation/TravelBooking.class 
Binary file not shown.
 BIN +1.04 KB oops-concepts/target/classes/com/ramesh/ood/concepts/encapsulation/Encapsulation.class 
Binary file not shown.
 BIN +1.06 KB oops-concepts/target/classes/com/ramesh/ood/concepts/encapsulation/Person.class 
Binary file not shown.
 BIN +748 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/inheritance/Animal.class 
Binary file not shown.
 BIN +896 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/inheritance/Dog.class 
Binary file not shown.
 BIN +631 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/inheritance/Inheritance.class 
Binary file not shown.
 BIN +575 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/BadTraveler.class 
Binary file not shown.
 BIN +602 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/Bike.class 
Binary file not shown.
 BIN +599 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/Car.class 
Binary file not shown.
 BIN +819 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/GoodTraveler.class 
Binary file not shown.
 BIN +1001 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/LooseCoupling.class 
Binary file not shown.
 BIN +160 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/loosecoupling/Vehicle.class 
Binary file not shown.
 BIN +617 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/polymorphism/CashPayment.class 
Binary file not shown.
 BIN +628 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/polymorphism/CreditPayment.class 
Binary file not shown.
 BIN +157 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/polymorphism/Payment.class 
Binary file not shown.
 BIN +838 Bytes oops-concepts/target/classes/com/ramesh/ood/concepts/polymorphism/Polymorphism.class 
Binary file not shown.
 36  oops-principles/.classpath 
@@ -0,0 +1,36 @@
<?xml version="1.0" encoding="UTF-8"?>
<classpath>
	<classpathentry kind="src" output="target/classes" path="src/main/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="src" output="target/test-classes" path="src/test/java">
		<attributes>
			<attribute name="optional" value="true"/>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry excluding="**" kind="src" output="target/test-classes" path="src/test/resources">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.7">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="con" path="org.eclipse.m2e.MAVEN2_CLASSPATH_CONTAINER">
		<attributes>
			<attribute name="maven.pomderived" value="true"/>
		</attributes>
	</classpathentry>
	<classpathentry kind="output" path="target/classes"/>
</classpath>
 23  oops-principles/.project 
@@ -0,0 +1,23 @@
<?xml version="1.0" encoding="UTF-8"?>
<projectDescription>
	<name>ood-principles</name>
	<comment></comment>
	<projects>
	</projects>
	<buildSpec>
		<buildCommand>
			<name>org.eclipse.jdt.core.javabuilder</name>
			<arguments>
			</arguments>
		</buildCommand>
		<buildCommand>
			<name>org.eclipse.m2e.core.maven2Builder</name>
			<arguments>
			</arguments>
		</buildCommand>
	</buildSpec>
	<natures>
		<nature>org.eclipse.jdt.core.javanature</nature>
		<nature>org.eclipse.m2e.core.maven2Nature</nature>
	</natures>
</projectDescription>
 13  oops-principles/.settings/org.eclipse.jdt.core.prefs 
@@ -0,0 +1,13 @@
eclipse.preferences.version=1
org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
org.eclipse.jdt.core.compiler.codegen.methodParameters=do not generate
org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
org.eclipse.jdt.core.compiler.compliance=1.7
org.eclipse.jdt.core.compiler.debug.lineNumber=generate
org.eclipse.jdt.core.compiler.debug.localVariable=generate
org.eclipse.jdt.core.compiler.debug.sourceFile=generate
org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
org.eclipse.jdt.core.compiler.source=1.7
 4  oops-principles/.settings/org.eclipse.m2e.core.prefs 
@@ -0,0 +1,4 @@
activeProfiles=
eclipse.preferences.version=1
resolveWorkspaceProjects=true
version=1
 34  oops-principles/pom.xml 
@@ -0,0 +1,34 @@
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.ramesh.ood</groupId>
		<artifactId>object-oriented-design</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>oops-principles</artifactId>

	<dependencies>
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>javax.mail</artifactId>
			<version>1.5.5</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.0.60</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>

	</dependencies>
</project> 
 44  oops-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/App.java 
@@ -0,0 +1,44 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

import java.util.ArrayList;
import java.util.List;

public class App {

	public static void main(String[] args) throws Exception {

		CustomerDao customerDao = new VoiletCustomerDaoImpl();
		performOperationsUsing(customerDao);
	}

	private static void addCustomers(CustomerDao customerDao) throws Exception {
		for (Customer customer : generateSampleCustomers()) {
			customerDao.add(customer);
		}
	}

	private static void performOperationsUsing(final CustomerDao customerDao) throws Exception {
		addCustomers(customerDao);
		final Customer customer = new Customer(4, "Dan", "Danson");
		customerDao.add(customer);
		customer.setFirstName("Daniel");
		customer.setLastName("Danielson");
		customerDao.update(customer);
	}

	/**
	 * Generate customers.
	 * 
	 * @return list of customers.
	 */
	public static List<Customer> generateSampleCustomers() {
		final Customer customer1 = new Customer(1, "Adam", "Adamson");
		final Customer customer2 = new Customer(2, "Bob", "Bobson");
		final Customer customer3 = new Customer(3, "Carl", "Carlson");
		final List<Customer> customers = new ArrayList<Customer>();
		customers.add(customer1);
		customers.add(customer2);
		customers.add(customer3);
		return customers;
	}
}
 70  ...-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/Customer.java 
@@ -0,0 +1,70 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

/**
 * A customer POJO that represents the data that will be read from the data source.
 *
 */
public class Customer {

  private int id;
  private String firstName;
  private String lastName;

  /**
   * Creates an instance of customer.
   */
  public Customer(final int id, final String firstName, final String lastName) {
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
  }

  public int getId() {
    return id;
  }

  public void setId(final int id) {
    this.id = id;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(final String firstName) {
    this.firstName = firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setLastName(final String lastName) {
    this.lastName = lastName;
  }

  @Override
  public String toString() {
    return "Customer{" + "id=" + getId() + ", firstName='" + getFirstName() + '\'' + ", lastName='"
        + getLastName() + '\'' + '}';
  }

  @Override
  public boolean equals(final Object that) {
    boolean isEqual = false;
    if (this == that) {
      isEqual = true;
    } else if (that != null && getClass() == that.getClass()) {
      final Customer customer = (Customer) that;
      if (getId() == customer.getId()) {
        isEqual = true;
      }
    }
    return isEqual;
  }

  @Override
  public int hashCode() {
    return getId();
  }
}
 32  ...inciples/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/CustomerDao.java 
@@ -0,0 +1,32 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

public interface CustomerDao {
	 /**
	   * @param id unique identifier of the customer.
	   * @return an optional with customer if a customer with unique identifier <code>id</code>
	   *     exists, empty optional otherwise.
	   * @throws Exception if any error occurs.
	   */
	  Customer getById(int id) throws Exception;

	  /**
	   * @param customer the customer to be added.
	   * @return true if customer is successfully added, false if customer already exists.
	   * @throws Exception if any error occurs.
	   */
	  boolean add(Customer customer) throws Exception;

	  /**
	   * @param customer the customer to be updated.
	   * @return true if customer exists and is successfully updated, false otherwise.
	   * @throws Exception if any error occurs.
	   */
	  boolean update(Customer customer) throws Exception;

	  /**
	   * @param customer the customer to be deleted.
	   * @return true if customer exists and is successfully deleted, false otherwise.
	   * @throws Exception if any error occurs.
	   */
	  boolean delete(Customer customer) throws Exception;
}
 13  ...rinciples/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/DataSource.java 
@@ -0,0 +1,13 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

import java.sql.Connection;

/**
 * Datasource interface
 *
 */
public interface DataSource {
	void createConnection(DatabaseConfig config);
	Connection getConnection();

}
 33  ...iples/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/DatabaseConfig.java 
@@ -0,0 +1,33 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

public class DatabaseConfig {
	private String driverClass;
	private String userName;
	private String password;
	private String url;
	public String getDriverClass() {
		return driverClass;
	}
	public void setDriverClass(String driverClass) {
		this.driverClass = driverClass;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}

}
 41  ...ples/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/MySQLDataSource.java 
@@ -0,0 +1,41 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

import java.sql.Connection;
import java.sql.SQLException;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class MySQLDataSource implements DataSource {

	private MysqlDataSource dataSource;
	private static DatabaseConfig config;
	public MySQLDataSource(){
		config = new DatabaseConfig();
		config.setDriverClass("com.mysql.jdbc.Driver");
		config.setUrl("jdbc:mysql://localhost:3306/demo");
		config.setUserName("root");
		config.setPassword("root");
		DataSource dataSource = new MySQLDataSource();
		dataSource.createConnection(config);
	}

	@Override
	public void createConnection(DatabaseConfig databaseConfig) {
		dataSource = new MysqlDataSource();
		dataSource.setUrl(databaseConfig.getUrl());
		dataSource.setUser(databaseConfig.getUserName());
		dataSource.setPassword(databaseConfig.getPassword());
	}

	@Override
	public Connection getConnection() {
		try {
			return dataSource.getConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

}
 105  ...rc/main/java/com/ramesh/ood/principles/dependencyinversion/bad/VoiletCustomerDaoImpl.java 
@@ -0,0 +1,105 @@
package com.ramesh.ood.principles.dependencyinversion.bad;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * 
 * VoiletCustomerDaoImpl class violet the dependency injection principle and
 * have hard dependency with MySQLDataSource instance . It depends on
 * MySQLDataSource that has created using new keyword.
 * 
 * If customerDaoImpl class wants to support Oracle database 
 * then we need to change this for Oracle database configuration.
 *
 */
public class VoiletCustomerDaoImpl implements CustomerDao {

	//Hard dependency with MySQLDataSource instance
	private DataSource dataSource = new MySQLDataSource();

	private Connection getConnection() throws SQLException {
		return this.dataSource.getConnection();
	}

	private DataSource getDataSource() throws SQLException {
		return this.dataSource;
	}

	private Customer createCustomer(ResultSet resultSet) throws SQLException {
		return new Customer(resultSet.getInt("ID"), resultSet.getString("first_name"),
				resultSet.getString("last_name"));
	}

	@Override
	public Customer getById(int id) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS WHERE ID = ?");
			statement.setInt(1, id);
			ResultSet resultSet = statement.executeQuery();
			if (resultSet.next()) {
				return createCustomer(resultSet);
			} else {
				return null;
			}
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean add(Customer customer) throws Exception {

		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("INSERT INTO CUSTOMERS VALUES (?,?,?)");
			statement.setInt(1, customer.getId());
			statement.setString(2, customer.getFirstName());
			statement.setString(3, customer.getLastName());
			statement.execute();
			return true;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean update(Customer customer) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection
					.prepareStatement("UPDATE CUSTOMERS SET first_name = ?, last_name = ? WHERE ID = ?");
			statement.setString(1, customer.getFirstName());
			statement.setString(2, customer.getLastName());
			statement.setInt(3, customer.getId());
			return statement.executeUpdate() > 0;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean delete(Customer customer) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("DELETE FROM CUSTOMERS WHERE ID = ?");
			statement.setInt(1, customer.getId());
			return statement.executeUpdate() > 0;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

}
 BIN +58 KB .../com/ramesh/ood/principles/dependencyinversion/bad/dependencyinversion_principles_bad.png 
Binary file not shown.
 108  ...com/ramesh/ood/principles/dependencyinversion/bad/dependencyinversion_principles_bad.ucls 
@@ -0,0 +1,108 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.Customer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/Customer.java" binary="false" 
    corner="BOTTOM_RIGHT">    
    <position height="209" width="346" x="-144" y="225"/>    
    <display autosize="false" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="2" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.CustomerDao" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/CustomerDao.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="390" y="110"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="3" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.DatabaseConfig" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/DatabaseConfig.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="1125" y="167"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.MySQLDataSource" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/MySQLDataSource.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="835" y="517"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="5" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.VoiletCustomerDaoImpl" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/VoiletCustomerDaoImpl.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="418" y="358"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="6" language="java" name="com.ramesh.ood.principles.dependencyinversion.bad.DataSource" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/bad/DataSource.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="795" y="197"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <association id="7">    
    <end type="SOURCE" refId="5" navigable="false">      
      <attribute id="8" name="dataSource"/>      
      <multiplicity id="9" minimum="0" maximum="1"/>    
    </end>    
    <end type="TARGET" refId="6" navigable="true"/>    
    <display labels="true" multiplicity="true"/>  
  </association>  
  <association id="10">    
    <end type="SOURCE" refId="4" navigable="false">      
      <attribute id="11" name="config"/>      
      <multiplicity id="12" minimum="0" maximum="1"/>    
    </end>    
    <end type="TARGET" refId="3" navigable="true"/>    
    <display labels="true" multiplicity="true"/>  
  </association>  
  <realization id="13">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <dependency id="14">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="1"/>  
  </dependency>  
  <realization id="15">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="6"/>  
  </realization>  
  <dependency id="16">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="4"/>  
  </dependency>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 73  oops-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/App.java 
@@ -0,0 +1,73 @@
package com.ramesh.ood.principles.dependencyinversion.good;

import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

public class App {

	private final static String CREATE_SCHEMA_SQL = "CREATE TABLE `CUSTOMERS` (`id` INT(11) NULL DEFAULT NULL,`first_name` VARCHAR(50) NULL DEFAULT NULL,`last_name` VARCHAR(50) NULL DEFAULT NULL);";
	private final static String DELETE_SCHEMA_SQL = "DROP TABLE CUSTOMERS";
	private static DatabaseConfig config;

	public static void main(String[] args) throws Exception {

		config = new DatabaseConfig();
		config.setDriverClass("com.mysql.jdbc.Driver");
		config.setUrl("jdbc:mysql://localhost:3306/demo");
		config.setUserName("root");
		config.setPassword("root");
		DataSource dataSource = new MySQLDataSource();
		dataSource.createConnection(config);
		CustomerDao customerDao = new CustomerDaoImpl(dataSource);
		createSchema(dataSource);
		performOperationsUsing(customerDao);
		// deleteSchema(dataSource);

	}

	private static void deleteSchema(DataSource dataSource) throws SQLException {
		try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
			statement.execute(DELETE_SCHEMA_SQL);
		}
	}

	private static void createSchema(DataSource dataSource) throws SQLException {
		try (Connection connection = dataSource.getConnection(); Statement statement = connection.createStatement()) {
			statement.execute(CREATE_SCHEMA_SQL);
		}
	}

	private static void addCustomers(CustomerDao customerDao) throws Exception {
		for (Customer customer : generateSampleCustomers()) {
			customerDao.add(customer);
		}
	}

	private static void performOperationsUsing(final CustomerDao customerDao) throws Exception {
		addCustomers(customerDao);
		final Customer customer = new Customer(4, "Dan", "Danson");
		customerDao.add(customer);
		customer.setFirstName("Daniel");
		customer.setLastName("Danielson");
		customerDao.update(customer);
	}

	/**
	 * Generate customers.
	 * 
	 * @return list of customers.
	 */
	public static List<Customer> generateSampleCustomers() {
		final Customer customer1 = new Customer(1, "Adam", "Adamson");
		final Customer customer2 = new Customer(2, "Bob", "Bobson");
		final Customer customer3 = new Customer(3, "Carl", "Carlson");
		final List<Customer> customers = new ArrayList<>();
		customers.add(customer1);
		customers.add(customer2);
		customers.add(customer3);
		return customers;
	}
}
 70  ...principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/Customer.java 
@@ -0,0 +1,70 @@
package com.ramesh.ood.principles.dependencyinversion.good;

/**
 * A customer POJO that represents the data that will be read from the data source.
 *
 */
public class Customer {

  private int id;
  private String firstName;
  private String lastName;

  /**
   * Creates an instance of customer.
   */
  public Customer(final int id, final String firstName, final String lastName) {
    this.id = id;
    this.firstName = firstName;
    this.lastName = lastName;
  }

  public int getId() {
    return id;
  }

  public void setId(final int id) {
    this.id = id;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(final String firstName) {
    this.firstName = firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setLastName(final String lastName) {
    this.lastName = lastName;
  }

  @Override
  public String toString() {
    return "Customer{" + "id=" + getId() + ", firstName='" + getFirstName() + '\'' + ", lastName='"
        + getLastName() + '\'' + '}';
  }

  @Override
  public boolean equals(final Object that) {
    boolean isEqual = false;
    if (this == that) {
      isEqual = true;
    } else if (that != null && getClass() == that.getClass()) {
      final Customer customer = (Customer) that;
      if (getId() == customer.getId()) {
        isEqual = true;
      }
    }
    return isEqual;
  }

  @Override
  public int hashCode() {
    return getId();
  }
}
 32  ...nciples/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/CustomerDao.java 
@@ -0,0 +1,32 @@
package com.ramesh.ood.principles.dependencyinversion.good;

public interface CustomerDao {
	 /**
	   * @param id unique identifier of the customer.
	   * @return an optional with customer if a customer with unique identifier <code>id</code>
	   *     exists, empty optional otherwise.
	   * @throws Exception if any error occurs.
	   */
	  Customer getById(int id) throws Exception;

	  /**
	   * @param customer the customer to be added.
	   * @return true if customer is successfully added, false if customer already exists.
	   * @throws Exception if any error occurs.
	   */
	  boolean add(Customer customer) throws Exception;

	  /**
	   * @param customer the customer to be updated.
	   * @return true if customer exists and is successfully updated, false otherwise.
	   * @throws Exception if any error occurs.
	   */
	  boolean update(Customer customer) throws Exception;

	  /**
	   * @param customer the customer to be deleted.
	   * @return true if customer exists and is successfully deleted, false otherwise.
	   * @throws Exception if any error occurs.
	   */
	  boolean delete(Customer customer) throws Exception;
}
 104  ...les/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/CustomerDaoImpl.java 
@@ -0,0 +1,104 @@
package com.ramesh.ood.principles.dependencyinversion.good;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
/**
 * 
 * CustomerDaoImpl implements inversion of control. 
 * It depends on abstraction(DataSource interface) that can be injected
 * through its constructor.
 * 
 * If we want to support Oracle database in future 
 * then client needs to pass datasource implementation as per his/her requirement.   
 *
 */
public class CustomerDaoImpl implements CustomerDao {


	private DataSource dataSource;

	//It depends on abstraction(DataSource interface) that can be injected through its constructor
	public CustomerDaoImpl(DataSource dataSource) {
		this.dataSource = dataSource;
	}

	private Connection getConnection() throws SQLException {
		return this.dataSource.getConnection();
	}

	private Customer createCustomer(ResultSet resultSet) throws SQLException {
		return new Customer(resultSet.getInt("ID"), resultSet.getString("first_name"), resultSet.getString("last_name"));
	}

	@Override
	public Customer getById(int id) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("SELECT * FROM CUSTOMERS WHERE ID = ?");
			statement.setInt(1, id);
			ResultSet resultSet = statement.executeQuery();
			if (resultSet.next()) {
				return createCustomer(resultSet);
			} else {
				return null;
			}
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean add(Customer customer) throws Exception {

		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("INSERT INTO CUSTOMERS VALUES (?,?,?)");
			statement.setInt(1, customer.getId());
			statement.setString(2, customer.getFirstName());
			statement.setString(3, customer.getLastName());
			statement.execute();
			return true;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean update(Customer customer) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection
					.prepareStatement("UPDATE CUSTOMERS SET first_name = ?, last_name = ? WHERE ID = ?");
			statement.setString(1, customer.getFirstName());
			statement.setString(2, customer.getLastName());
			statement.setInt(3, customer.getId());
			return statement.executeUpdate() > 0;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public boolean delete(Customer customer) throws Exception {
		try {
			Connection connection = getConnection();
			PreparedStatement statement = connection.prepareStatement("DELETE FROM CUSTOMERS WHERE ID = ?");
			statement.setInt(1, customer.getId());
			return statement.executeUpdate() > 0;
		} catch (SQLException ex) {
			throw new Exception(ex.getMessage(), ex);
		}
	}

}
 13  ...inciples/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/DataSource.java 
@@ -0,0 +1,13 @@
package com.ramesh.ood.principles.dependencyinversion.good;

import java.sql.Connection;

/**
 * Datasource interface
 *
 */
public interface DataSource {
	void createConnection(DatabaseConfig config);
	Connection getConnection();

}
 33  ...ples/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/DatabaseConfig.java 
@@ -0,0 +1,33 @@
package com.ramesh.ood.principles.dependencyinversion.good;

public class DatabaseConfig {
	private String driverClass;
	private String userName;
	private String password;
	private String url;
	public String getDriverClass() {
		return driverClass;
	}
	public void setDriverClass(String driverClass) {
		this.driverClass = driverClass;
	}
	public String getUserName() {
		return userName;
	}
	public void setUserName(String userName) {
		this.userName = userName;
	}
	public String getPassword() {
		return password;
	}
	public void setPassword(String password) {
		this.password = password;
	}
	public String getUrl() {
		return url;
	}
	public void setUrl(String url) {
		this.url = url;
	}

}
 30  ...ciples/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/H2DataSource.java 
@@ -0,0 +1,30 @@
package com.ramesh.ood.principles.dependencyinversion.good;

import java.sql.Connection;
import java.sql.SQLException;

import org.h2.jdbcx.JdbcDataSource;

public class H2DataSource implements DataSource {

	private JdbcDataSource dataSource;

	@Override
	public void createConnection(DatabaseConfig databaseConfig) {
		dataSource = new JdbcDataSource();
		dataSource.setURL(databaseConfig.getUrl());
		dataSource.setUser(databaseConfig.getUserName());
		dataSource.setPassword(databaseConfig.getPassword());
	}

	@Override
	public Connection getConnection() {
		try {
			return dataSource.getConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}
}
 5  .../src/main/java/com/ramesh/ood/principles/dependencyinversion/good/MSServerConnection.java 
@@ -0,0 +1,5 @@
package com.ramesh.ood.principles.dependencyinversion.good;

public class MSServerConnection {

}
 31  ...les/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/MySQLDataSource.java 
@@ -0,0 +1,31 @@
package com.ramesh.ood.principles.dependencyinversion.good;

import java.sql.Connection;
import java.sql.SQLException;

import com.mysql.jdbc.jdbc2.optional.MysqlDataSource;

public class MySQLDataSource implements DataSource {

	private MysqlDataSource dataSource;

	@Override
	public void createConnection(DatabaseConfig databaseConfig) {
		dataSource = new MysqlDataSource();
		dataSource.setUrl(databaseConfig.getUrl());
		dataSource.setUser(databaseConfig.getUserName());
		dataSource.setPassword(databaseConfig.getPassword());
	}

	@Override
	public Connection getConnection() {
		try {
			return dataSource.getConnection();
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

}
 BIN +48.9 KB ...om/ramesh/ood/principles/dependencyinversion/good/dependencyinversion_principles_good.png 
Binary file not shown.
 115  ...m/ramesh/ood/principles/dependencyinversion/good/dependencyinversion_principles_good.ucls 
@@ -0,0 +1,115 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.Customer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/Customer.java" binary="false" 
    corner="BOTTOM_RIGHT">    
    <position height="191" width="354" x="-46" y="151"/>    
    <display autosize="false" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="2" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.CustomerDao" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/CustomerDao.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="587" y="13"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="3" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.CustomerDaoImpl" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/CustomerDaoImpl.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="589" y="263"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.DatabaseConfig" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/DatabaseConfig.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="170" width="354" x="802" y="-55"/>    
    <display autosize="false" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="5" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.DataSource" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/DataSource.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="1028" y="254"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="6" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.H2DataSource" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/H2DataSource.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="807" y="482"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="7" language="java" name="com.ramesh.ood.principles.dependencyinversion.good.MySQLDataSource" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/dependencyinversion/good/MySQLDataSource.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="1216" y="486"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <dependency id="8">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="4"/>  
  </dependency>  
  <dependency id="9">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="1"/>  
  </dependency>  
  <association id="10">    
    <end type="SOURCE" refId="3" navigable="false">      
      <attribute id="11" name="dataSource"/>      
      <multiplicity id="12" minimum="0" maximum="1"/>    
    </end>    
    <end type="TARGET" refId="5" navigable="true"/>    
    <display labels="true" multiplicity="true"/>  
  </association>  
  <realization id="13">    
    <end type="SOURCE" refId="7"/>    
    <end type="TARGET" refId="5"/>  
  </realization>  
  <realization id="14">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <realization id="15">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="5"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 44  oops-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/README.md 
@@ -0,0 +1,44 @@
*** LSP = Liskov's Substitution Principle
-----------------------------------------------

*** Description = 

	- All the time we design a program module and we create some class hierarchies. Then we extend some classes creating some derived classes. 
	  We must make sure that the new derived classes just extend without replacing the functionality of old classes. Otherwise the new classes can 
	  produce undesired effects when they are used in existing program modules. (http://www.oodesign.com/design-principles.html)

	- The Liskov Substitution Principle (LSP) applies to inheritance hierarchies, specifying that you should design your classes so that client 
	  dependencies can be substituted with subclasses without the client knowing about the change.

	- All subclasses must, therefore, operate in the same manner as their base classes. The specific functionality of the subclass may be different 
	  but must conform to the expected behavior of the base class. To be a true behavioral subtype, the subclass must not only implement the base 
	  class’s methods and properties, but also conform to its implied behavior. Basically, derived classes should never do less than their base class.

	- Sometimes code refactoring is required to fix identified LSP violations.

-----------------------------------------------

*** Examples =

(1) Media Player (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer)

	Requirement - Let's play video in list of all media players in the client program

	------ First let's see "bad" design and implementation (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer.bad)

		- Refer "MediaPlayer.java" super class and its sub classes "DivMediaPlayer.java", "VlcMediaPlayer.java"
		- Refer "ClientTestProgram.java" code till line-24, before adding "WinampMediaPlayer.java"
		- Now WinampMediaPlayer.java is added, in which LSP is violated
		- Oops, it broke "ClientTestProgram.java" code line-31

	------ How to do code-refactoring to make "good" design using LSP? (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer.good)

		- Refer "MediaPlayer.java" super class and its sub class "AudioMediaPlayer.java" having play audio ability
		- Refer "VideoMediaPlayer.java" extends "MediaPlayer.java" and adds play video ability
		- Refer "DivMediaPlayer.java", "VlcMediaPlayer.java". Both extends "VideoMediaPlayer.java" for play audio and video ability.
		- Refer "WinampMediaPlayer.java" which extends "AudioMediaPlayer.java" for play audio ability.
		- So client program can substitute "VideoMediaPlayer.java" super type with "DivMediaPlayer.java" or "VlcMediaPlayer.java", but not with "WinampMediaPlayer.java"   

 -----------------------------------------------

 Feel free to contribute code for more examples in similar fashion... :-)
 45  ...s/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/ClientTestProgram.java 
@@ -0,0 +1,45 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

import java.util.ArrayList;
import java.util.List;

/**
 * This is sample client program which refers MediaPlayer
 * 
 * @author tirthalp
 */
public class ClientTestProgram {

	public static void main(String[] args) {		

		// Created list of players
		List<MediaPlayer> allPlayers = new ArrayList<MediaPlayer>();		
		allPlayers.add(new VlcMediaPlayer());
		allPlayers.add(new DivMediaPlayer());

		// Play video in all players
		playVideoInAllMediaPlayers(allPlayers);

		// Well - all works as of now...... :-)
		System.out.println("---------------------------");

		// Now adding new Winamp player
		allPlayers.add(new WinampMediaPlayer());

		// Again play video in all players & Oops it broke the program... :-(
		// Why we got unexpected behavior in client? --- Because LSP is violated in WinampMediaPlayer.java, as it changed the original behavior of super class MediaPlayer.java
		playVideoInAllMediaPlayers(allPlayers);
	}

	/**
	 * This method is playing video in all players
	 * 
	 * @param allPlayers
	 */
	public static void playVideoInAllMediaPlayers(List<MediaPlayer> allPlayers) {

		for(MediaPlayer player : allPlayers) {
			player.playVideo();
		}
	}
}
 23  ...ples/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/DivMediaPlayer.java 
@@ -0,0 +1,23 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

/**
 * Div Media player implements Media player. Perfect, 
 * LSP is not violated here.
 *  
 * @author tirthalp
 */
public class DivMediaPlayer implements MediaPlayer {

	@Override
	public void playAudio() {
		System.out.println(" Playing audio ..........");

	}

	@Override
	public void playVideo() {
		System.out.println(" Playing video ..........");

	}

}
 12  ...nciples/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/MediaPlayer.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

/**
 * Interface for media player  to play video and audio.
 * 
 */
public interface MediaPlayer {
	public void playAudio();
	public void playVideo();

}

 7  ...in/java/com/ramesh/ood/principles/interfacesegregation/bad/VideoUnsupportedException.java 
@@ -0,0 +1,7 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

public class VideoUnsupportedException extends RuntimeException {

	private static final long serialVersionUID = 1L;

}
 21  ...ples/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/VlcMediaPlayer.java 
@@ -0,0 +1,21 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

/**
 * VLC Media player  implements Media player.
 *  Perfect, LSP is not violated here.
 * 
 * @author tirthalp
 */
public class VlcMediaPlayer implements MediaPlayer {
	@Override
	public void playAudio() {
		System.out.println(" Playing audio ..........");

	}

	@Override
	public void playVideo() {
		System.out.println(" Playing video ..........");

	}
} 
 23  ...s/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/WinampMediaPlayer.java 
@@ -0,0 +1,23 @@
package com.ramesh.ood.principles.interfacesegregation.bad;

/**
 *  Now there is a need of launching new Winamp player to play audio,
 *   but playing video is not supported at this stage.
 *  
 *  Here , clients should not be forced to depend upon interface members they do not use.
 *  In this case , playVideo() method is not required
 *
 */
public class WinampMediaPlayer implements MediaPlayer {

	// Play video is not supported in Winamp player
	public void playVideo() {
		throw new VideoUnsupportedException();
	}

	@Override
	public void playAudio() {
		System.out.println("Playing audio ..............");

	}
}
 66  ...om/ramesh/ood/principles/interfacesegregation/bad/interfacesegregation_principle_bad.ucls 
@@ -0,0 +1,66 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" always-add-relationships="false" generalizations="true" realizations="true" 
  associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <interface id="1" language="java" name="com.ramesh.ood.principles.interfacesegregation.bad.MediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/MediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="565" y="96"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="2" language="java" name="com.ramesh.ood.principles.interfacesegregation.bad.VlcMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/VlcMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="573" y="326"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="3" language="java" name="com.ramesh.ood.principles.interfacesegregation.bad.WinampMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/WinampMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="942" y="324"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.interfacesegregation.bad.DivMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/bad/DivMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="184" y="322"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <realization id="5">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <realization id="6">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <realization id="7">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 9  ...s/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/AudioMediaPlayer.java 
@@ -0,0 +1,9 @@
package com.ramesh.ood.principles.interfacesegregation.good;

/**
 *  Interface for playing audio.
 * 
 */
public interface AudioMediaPlayer {
	public void playAudio();
}
 41  .../src/main/java/com/ramesh/ood/principles/interfacesegregation/good/ClientTestProgram.java 
@@ -0,0 +1,41 @@
package com.ramesh.ood.principles.interfacesegregation.good;

import java.util.ArrayList;
import java.util.List;

/**
 * This is sample client program which refers MediaPlayer
 * 
 * @author tirthalp
 */
public class ClientTestProgram {

	public static void main(String[] args) {		

		// Created list of video players
		List<VideoMediaPlayer> allPlayers = new ArrayList<VideoMediaPlayer>();		
		allPlayers.add(new VlcMediaPlayer());
		allPlayers.add(new DivMediaPlayer());

		// Play video in all players
		playVideoInAllMediaPlayers(allPlayers);

		// Well - all works as of now...... :-)
		System.out.println("---------------------------");

		// Now adding new Winamp player. If you uncomment below line, it would give compile time error as can't add audio player in list of video players.
		// allPlayers.add(new WinampMediaPlayer());	
	}

	/**
	 * This method is playing video in all players
	 * 
	 * @param allPlayers
	 */
	public static void playVideoInAllMediaPlayers(List<VideoMediaPlayer> allPlayers) {

		for(VideoMediaPlayer player : allPlayers) {
			player.playVideo();
		}
	}
}
 19  ...les/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/DivMediaPlayer.java 
@@ -0,0 +1,19 @@
package com.ramesh.ood.principles.interfacesegregation.good;

/**
 * Div Media player implements both VideoMediaPlayer,AudioMediaPlayer.
 */
public class DivMediaPlayer implements VideoMediaPlayer, AudioMediaPlayer {

	@Override
	public void playVideo() {
		System.out.println(" Playing video ..........");

	}

	@Override
	public void playAudio() {
		System.out.println(" Playing audio ..........");

	}
}
 12  ...s/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/VideoMediaPlayer.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.interfacesegregation.good;

/**
 *  Interface for playing video.
 * 
 */
public interface VideoMediaPlayer  {

	// Play video implementation
	public void playVideo();

}
 7  ...n/java/com/ramesh/ood/principles/interfacesegregation/good/VideoUnsupportedException.java 
@@ -0,0 +1,7 @@
package com.ramesh.ood.principles.interfacesegregation.good;

public class VideoUnsupportedException extends RuntimeException {

	private static final long serialVersionUID = 1L;

}
 23  ...les/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/VlcMediaPlayer.java 
@@ -0,0 +1,23 @@
package com.ramesh.ood.principles.interfacesegregation.good;

/**
 * VLC Media player implements both Video Media Player and Audio Media Player.
 *  Perfect, LSP is not violated here.
 * 
 * @author tirthalp
 */
public class VlcMediaPlayer implements VideoMediaPlayer, AudioMediaPlayer {

	@Override
	public void playVideo() {
		System.out.println(" Playing video ..........");

	}

	@Override
	public void playAudio() {
		System.out.println(" Playing audio ..........");

	}

} 
 16  .../src/main/java/com/ramesh/ood/principles/interfacesegregation/good/WinampMediaPlayer.java 
@@ -0,0 +1,16 @@
package com.ramesh.ood.principles.interfacesegregation.good;

/**
 *  
 *  So Winamp Media player only implements Audio Media Player. 
 *
 */
public class WinampMediaPlayer implements AudioMediaPlayer {

	@Override
	public void playAudio() {
		System.out.println(" Playing audio........");

	}

}
 BIN +23.7 KB ...m/ramesh/ood/principles/interfacesegregation/good/interfacesegregation_principle_good.png 
Binary file not shown.
 85  .../ramesh/ood/principles/interfacesegregation/good/interfacesegregation_principle_good.ucls 
@@ -0,0 +1,85 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.interfacesegregation.good.VlcMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/VlcMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="568" y="342"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="2" language="java" name="com.ramesh.ood.principles.interfacesegregation.good.VideoMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/VideoMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="741" y="108"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="3" language="java" name="com.ramesh.ood.principles.interfacesegregation.good.DivMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/DivMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="955" y="341"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="4" language="java" name="com.ramesh.ood.principles.interfacesegregation.good.AudioMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/AudioMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="96" width="349" x="47" y="68"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="5" language="java" name="com.ramesh.ood.principles.interfacesegregation.good.WinampMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/interfacesegregation/good/WinampMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="116" width="349" x="-12" y="299"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <realization id="6">    
    <end type="SOURCE" refId="1"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <realization id="7">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="4"/>  
  </realization>  
  <realization id="8">    
    <end type="SOURCE" refId="1"/>    
    <end type="TARGET" refId="4"/>  
  </realization>  
  <realization id="9">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <realization id="10">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="4"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 45  ...es/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/ClientTestProgram.java 
@@ -0,0 +1,45 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

import java.util.ArrayList;
import java.util.List;

/**
 * This is sample client program which refers MediaPlayer
 * 
 * @author tirthalp
 */
public class ClientTestProgram {

	public static void main(String[] args) {		

		// Created list of players
		List<MediaPlayer> allPlayers = new ArrayList<MediaPlayer>();		
		allPlayers.add(new VlcMediaPlayer());
		allPlayers.add(new DivMediaPlayer());

		// Play video in all players
		playVideoInAllMediaPlayers(allPlayers);

		// Well - all works as of now...... :-)
		System.out.println("---------------------------");

		// Now adding new Winamp player
		allPlayers.add(new WinampMediaPlayer());

		// Again play video in all players & Oops it broke the program... :-(
		// Why we got unexpected behavior in client? --- Because LSP is violated in WinampMediaPlayer.java, as it changed the original behavior of super class MediaPlayer.java
		playVideoInAllMediaPlayers(allPlayers);
	}

	/**
	 * This method is playing video in all players
	 * 
	 * @param allPlayers
	 */
	public static void playVideoInAllMediaPlayers(List<MediaPlayer> allPlayers) {

		for(MediaPlayer player : allPlayers) {
			player.playVideo();
		}
	}
}
 10  ...iples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/DivMediaPlayer.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

/**
 * Div Media player extending behavior of super class Media player. Perfect, LSP is not violated here.
 *  
 * @author tirthalp
 */
public class DivMediaPlayer extends MediaPlayer {

}
 20  ...inciples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/MediaPlayer.java 
@@ -0,0 +1,20 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

/**
 * Example media player super class which has ability to play video and audio
 * 
 * @author tirthalp
 */
public class MediaPlayer {

	// Play audio implementation
	public void playAudio() {
		System.out.println("Playing audio...");
	}

	// Play video implementation
	public void playVideo() {
		System.out.println("Playing video...");
	}
}

 7  ...ain/java/com/ramesh/ood/principles/liskovssubstitution/bad/VideoUnsupportedException.java 
@@ -0,0 +1,7 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

public class VideoUnsupportedException extends RuntimeException {

	private static final long serialVersionUID = 1L;

}
 10  ...iples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/VlcMediaPlayer.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

/**
 * VLC Media player extending behavior of super class Media player. Perfect, LSP is not violated here.
 * 
 * @author tirthalp
 */
public class VlcMediaPlayer extends MediaPlayer {

} 
 18  ...es/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/WinampMediaPlayer.java 
@@ -0,0 +1,18 @@
package com.ramesh.ood.principles.liskovssubstitution.bad;

/**
 *  Now there is a need of launching new Winamp player to play audio, but playing video is not supported at this stage.
 *  
 *  Oops... LSP is violated here! Why? Logically winamp player only supports playing audio. So what's wrong in overriding playVideo method of super class?
 *
 *  Well, see how it broke the client program (ClientTestProgram.java)
 *
 * @author tirthalp
 */
public class WinampMediaPlayer extends MediaPlayer {

	// Play video is not supported in Winamp player
	public void playVideo() {
		throw new VideoUnsupportedException();
	}
}
 BIN +19.8 KB ...a/com/ramesh/ood/principles/liskovssubstitution/bad/liskovssubstitution_principle_bad.png 
Binary file not shown.
 66  .../com/ramesh/ood/principles/liskovssubstitution/bad/liskovssubstitution_principle_bad.ucls 
@@ -0,0 +1,66 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.liskovssubstitution.bad.MediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/MediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="517" y="94"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="2" language="java" name="com.ramesh.ood.principles.liskovssubstitution.bad.VlcMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/VlcMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="160" y="330"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="3" language="java" name="com.ramesh.ood.principles.liskovssubstitution.bad.DivMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/DivMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="525" y="324"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.liskovssubstitution.bad.WinampMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/bad/WinampMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="878" y="322"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <generalization id="5">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="1"/>  
  </generalization>  
  <generalization id="6">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="1"/>  
  </generalization>  
  <generalization id="7">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="1"/>  
  </generalization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 10  ...es/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/AudioMediaPlayer.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 * This class is getting ability of playing audio from its super class
 * 
 * @author tirthalp
 */
public class AudioMediaPlayer extends MediaPlayer {

}
 41  ...s/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/ClientTestProgram.java 
@@ -0,0 +1,41 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

import java.util.ArrayList;
import java.util.List;

/**
 * This is sample client program which refers MediaPlayer
 * 
 * @author tirthalp
 */
public class ClientTestProgram {

	public static void main(String[] args) {		

		// Created list of video players
		List<VideoMediaPlayer> allPlayers = new ArrayList<VideoMediaPlayer>();		
		allPlayers.add(new VlcMediaPlayer());
		allPlayers.add(new DivMediaPlayer());

		// Play video in all players
		playVideoInAllMediaPlayers(allPlayers);

		// Well - all works as of now...... :-)
		System.out.println("---------------------------");

		// Now adding new Winamp player. If you uncomment below line, it would give compile time error as can't add audio player in list of video players.
		// allPlayers.add(new WinampMediaPlayer());	
	}

	/**
	 * This method is playing video in all players
	 * 
	 * @param allPlayers
	 */
	public static void playVideoInAllMediaPlayers(List<VideoMediaPlayer> allPlayers) {

		for(VideoMediaPlayer player : allPlayers) {
			player.playVideo();
		}
	}
}
 10  ...ples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/DivMediaPlayer.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 * Div Media player extending behavior of super class Video Media Player. Perfect, LSP is not violated here.
 *  
 * @author tirthalp
 */
public class DivMediaPlayer extends VideoMediaPlayer {

}
 15  ...nciples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/MediaPlayer.java 
@@ -0,0 +1,15 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 * Example media player super class which has ability to play audio
 * 
 * @author tirthalp
 */
public class MediaPlayer {

	// Play audio implementation
	public void playAudio() {
		System.out.println("Playing audio...");
	}
}

 15  ...es/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/VideoMediaPlayer.java 
@@ -0,0 +1,15 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 * This class has ability to play video as well as getting audio ability from super class
 * 
 * @author tirthalp
 */
public class VideoMediaPlayer extends MediaPlayer {

	// Play video implementation
	public void playVideo() {
		System.out.println("Playing video...");
	}

}
 7  ...in/java/com/ramesh/ood/principles/liskovssubstitution/good/VideoUnsupportedException.java 
@@ -0,0 +1,7 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

public class VideoUnsupportedException extends RuntimeException {

	private static final long serialVersionUID = 1L;

}
 10  ...ples/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/VlcMediaPlayer.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 * VLC Media player extending behavior of super class Video Media Player. Perfect, LSP is not violated here.
 * 
 * @author tirthalp
 */
public class VlcMediaPlayer extends VideoMediaPlayer {

} 
 12  ...s/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/WinampMediaPlayer.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.liskovssubstitution.good;

/**
 *  Now there is a need of launching new Winamp player to play audio, but playing video is not supported at this stage.
 *  
 *  So Winamp Media player extending behavior of super class Audio Media Player. Perfect, LSP is not violated here.
 *
 * @author tirthalp
 */
public class WinampMediaPlayer extends AudioMediaPlayer {

}
 96  ...om/ramesh/ood/principles/liskovssubstitution/good/liskovssubstitution_principle_good.ucls 
@@ -0,0 +1,96 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" always-add-relationships="false" generalizations="true" realizations="true" 
  associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.MediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/MediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="251" y="117"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="2" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.AudioMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/AudioMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="186" y="318"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="3" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.DivMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/DivMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="895" y="417"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.VideoMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/VideoMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="660" y="113"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="5" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.VlcMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/VlcMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="528" y="420"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="6" language="java" name="com.ramesh.ood.principles.liskovssubstitution.good.WinampMediaPlayer" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/liskovssubstitution/good/WinampMediaPlayer.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="183" y="522"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <generalization id="7">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="2"/>  
  </generalization>  
  <generalization id="8">    
    <end type="SOURCE" refId="5"/>    
    <end type="TARGET" refId="4"/>  
  </generalization>  
  <generalization id="9">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="1"/>  
  </generalization>  
  <generalization id="10">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="4"/>  
  </generalization>  
  <generalization id="11">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="1"/>  
  </generalization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 23  ...principles/src/main/java/com/ramesh/ood/principles/openclosed/bad/ConnectionProvider.java 
@@ -0,0 +1,23 @@
package com.ramesh.ood.principles.openclosed.bad;

import java.sql.Connection;

public class ConnectionProvider implements IConnectionProvider{

	public Connection mysqlConnection() {
		// establish connection to MySQL database
		return null;
	}

	public Connection msServerConnection() {
		// TODO establish connection to ms-server database
		return null;
	}

	public Connection h2Connection() {
		// establish connection to h2 database
		return null;
	}

	// if we need to support other database like oracle , we need to change this class
}
 10  ...rinciples/src/main/java/com/ramesh/ood/principles/openclosed/bad/IConnectionProvider.java 
@@ -0,0 +1,10 @@
package com.ramesh.ood.principles.openclosed.bad;

import java.sql.Connection;

public interface IConnectionProvider {
	public Connection mysqlConnection();
	public Connection msServerConnection();
	public Connection h2Connection();
	// if we need to support other database like oracle , we need to change this class
}
 BIN +9.59 KB ...iples/src/main/java/com/ramesh/ood/principles/openclosed/bad/openclosed_principle_bad.png 
Binary file not shown.
 36  ...ples/src/main/java/com/ramesh/ood/principles/openclosed/bad/openclosed_principle_bad.ucls 
@@ -0,0 +1,36 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.openclosed.bad.ConnectionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/bad/ConnectionProvider.java" binary="false" 
    corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="330" y="421"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="2" language="java" name="com.ramesh.ood.principles.openclosed.bad.IConnectionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/bad/IConnectionProvider.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="322" y="178"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <realization id="3">    
    <end type="SOURCE" refId="1"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 12  ...nciples/src/main/java/com/ramesh/ood/principles/openclosed/good/H2ConnectionProvider.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.openclosed.good;

import java.sql.Connection;

public class H2ConnectionProvider implements IConnetionProvider{

	public Connection establishconnection() {
		// TODO  : provide connection for H2 database and return the connection object
		return null;
	}

}
 7  ...rinciples/src/main/java/com/ramesh/ood/principles/openclosed/good/IConnetionProvider.java 
@@ -0,0 +1,7 @@
package com.ramesh.ood.principles.openclosed.good;

import java.sql.Connection;

public interface IConnetionProvider {
	public Connection establishconnection();
}
 12  ...s/src/main/java/com/ramesh/ood/principles/openclosed/good/MsServerConnectionProvider.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.openclosed.good;

import java.sql.Connection;

public class MsServerConnectionProvider implements IConnetionProvider{

	public Connection establishconnection() {
		// TODO : provide connection for MySQL database and return the connection object
		return null;
	}

}
 12  ...ples/src/main/java/com/ramesh/ood/principles/openclosed/good/MySQLConnectionProvider.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.openclosed.good;

import java.sql.Connection;

public class MySQLConnectionProvider implements IConnetionProvider{

	public Connection establishconnection() {
		// TODO : provide connection for MySQL database
		return null;
	}

}
 12  ...les/src/main/java/com/ramesh/ood/principles/openclosed/good/OracleConnectionProvider.java 
@@ -0,0 +1,12 @@
package com.ramesh.ood.principles.openclosed.good;

import java.sql.Connection;

public class OracleConnectionProvider implements IConnetionProvider{

	public Connection establishconnection() {
		// TODO : provide connection for Oracle database and return the connection object
		return null;
	}

}
 BIN +16 KB ...les/src/main/java/com/ramesh/ood/principles/openclosed/good/openclosed_principle_good.png 
Binary file not shown.
 66  ...es/src/main/java/com/ramesh/ood/principles/openclosed/good/openclosed_principle_good.ucls 
@@ -0,0 +1,66 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <interface id="1" language="java" name="com.ramesh.ood.principles.openclosed.good.IConnetionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/good/IConnetionProvider.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="403" y="112"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="2" language="java" name="com.ramesh.ood.principles.openclosed.good.MsServerConnectionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/good/MsServerConnectionProvider.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="75" y="307"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="3" language="java" name="com.ramesh.ood.principles.openclosed.good.MySQLConnectionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/good/MySQLConnectionProvider.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="421" y="305"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.openclosed.good.OracleConnectionProvider" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/openclosed/good/OracleConnectionProvider.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="752" y="303"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <realization id="5">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <realization id="6">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <realization id="7">    
    <end type="SOURCE" refId="4"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 5  ...ciples/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/IUserService.java 
@@ -0,0 +1,5 @@
package com.ramesh.ood.principles.singleresponsibility.bad;

public interface IUserService {
	public void registerUser(User user);
}
 26  oops-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/User.java 
@@ -0,0 +1,26 @@
package com.ramesh.ood.principles.singleresponsibility.bad;

public class User {
	private String firstName;
	private String lastName;
	private String email;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}

}
 71  ...nciples/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/UserService.java 
@@ -0,0 +1,71 @@
package com.ramesh.ood.principles.singleresponsibility.bad;

import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class UserService implements IUserService {

	public void registerUser(User user) {
		// save user to database
		// send mail to user for verfication

		final String fromEmail = user.getEmail(); // requires valid gmail
														// id
		final String password = "mypassword"; // correct password for gmail id
		final String toEmail = "myemail@yahoo.com"; // can be any email id

		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com"); // SMTP Host
		props.put("mail.smtp.port", "587"); // TLS Port
		props.put("mail.smtp.auth", "true"); // enable authentication
		props.put("mail.smtp.starttls.enable", "true"); // enable STARTTLS

		// create Authenticator object to pass in Session.getInstance argument
		Authenticator auth = new Authenticator() {
			// override the getPasswordAuthentication method
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(fromEmail, password);
			}
		};
		Session session = Session.getInstance(props, auth);
		sendEmail(session, toEmail, "TLSEmail Testing Subject", "TLSEmail Testing Body");

	}

	private void sendEmail(Session session, String toEmail, String subject, String body) {
		try {
			MimeMessage msg = new MimeMessage(session);
			// set message headers
			msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
			msg.addHeader("format", "flowed");
			msg.addHeader("Content-Transfer-Encoding", "8bit");

			msg.setFrom(new InternetAddress("no_reply@gmail.com", "NoReply-JD"));

			msg.setReplyTo(InternetAddress.parse("no_reply@gmail.com", false));

			msg.setSubject(subject, "UTF-8");

			msg.setText(body, "UTF-8");

			msg.setSentDate(new Date());

			msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
			System.out.println("Message is ready");
			Transport.send(msg);

			System.out.println("EMail Sent Successfully!!");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
 BIN +20.9 KB ...om/ramesh/ood/principles/singleresponsibility/bad/singleresponsibility_principles_bad.png 
Binary file not shown.
 50  ...m/ramesh/ood/principles/singleresponsibility/bad/singleresponsibility_principles_bad.ucls 
@@ -0,0 +1,50 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <class id="1" language="java" name="com.ramesh.ood.principles.singleresponsibility.bad.User" project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/User.java" binary="false" 
    corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="691" y="333"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="2" language="java" name="com.ramesh.ood.principles.singleresponsibility.bad.IUserService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/IUserService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="257" y="101"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="3" language="java" name="com.ramesh.ood.principles.singleresponsibility.bad.UserService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/bad/UserService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="253" y="327"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <dependency id="4">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="1"/>  
  </dependency>  
  <realization id="5">    
    <end type="SOURCE" refId="3"/>    
    <end type="TARGET" refId="2"/>  
  </realization>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 33  ...inciples/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/EmailInfo.java 
@@ -0,0 +1,33 @@
package com.ramesh.ood.principles.singleresponsibility.good;

public class EmailInfo {
	private String subject;
	private String body;
	private String email;
	public EmailInfo(String subject, String body, String email) {
		super();
		this.subject = subject;
		this.body = body;
		this.email = email;
	}
	// add required fields for advanced mailing...
	public String getSubject() {
		return subject;
	}
	public void setSubject(String subject) {
		this.subject = subject;
	}
	public String getBody() {
		return body;
	}
	public void setBody(String body) {
		this.body = body;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}

}
 65  ...iples/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/EmailService.java 
@@ -0,0 +1,65 @@
package com.ramesh.ood.principles.singleresponsibility.good;

import java.util.Date;
import java.util.Properties;

import javax.mail.Authenticator;
import javax.mail.Message;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

public class EmailService implements IEmailService {

	private final static String password = "mypassword"; // correct password for gmail id
	private final static String fromEmail = "myemail@yahoo.com"; // can be any email id
	public void sendEmail(EmailInfo emailInfo) {

		Properties props = new Properties();
		props.put("mail.smtp.host", "smtp.gmail.com"); // SMTP Host
		props.put("mail.smtp.port", "587"); // TLS Port
		props.put("mail.smtp.auth", "true"); // enable authentication
		props.put("mail.smtp.starttls.enable", "true"); // enable STARTTLS

		// create Authenticator object to pass in Session.getInstance argument
		Authenticator auth = new Authenticator() {
			// override the getPasswordAuthentication method
			protected PasswordAuthentication getPasswordAuthentication() {
				return new PasswordAuthentication(fromEmail, password);
			}
		};
		Session session = Session.getInstance(props, auth);
		sendEmail(session, emailInfo.getEmail(), emailInfo.getSubject(), emailInfo.getBody());

	}

	private void sendEmail(Session session, String toEmail, String subject, String body) {
		try {
			MimeMessage msg = new MimeMessage(session);
			// set message headers
			msg.addHeader("Content-type", "text/HTML; charset=UTF-8");
			msg.addHeader("format", "flowed");
			msg.addHeader("Content-Transfer-Encoding", "8bit");

			msg.setFrom(new InternetAddress("no_reply@gmail.com", "NoReply-JD"));

			msg.setReplyTo(InternetAddress.parse("no_reply@gmail.com", false));

			msg.setSubject(subject, "UTF-8");

			msg.setText(body, "UTF-8");

			msg.setSentDate(new Date());

			msg.setRecipients(Message.RecipientType.TO, InternetAddress.parse(toEmail, false));
			System.out.println("Message is ready");
			Transport.send(msg);

			System.out.println("EMail Sent Successfully!!");
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
 5  ...ples/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/IEmailService.java 
@@ -0,0 +1,5 @@
package com.ramesh.ood.principles.singleresponsibility.good;

public interface IEmailService {
	void sendEmail(EmailInfo emailInfo);
} 
 5  ...iples/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/IUserService.java 
@@ -0,0 +1,5 @@
package com.ramesh.ood.principles.singleresponsibility.good;

public interface IUserService {
	public void registerUser(User user);
}
 26  oops-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/User.java 
@@ -0,0 +1,26 @@
package com.ramesh.ood.principles.singleresponsibility.good;

public class User {
	private String firstName;
	private String lastName;
	private String email;
	public String getFirstName() {
		return firstName;
	}
	public void setFirstName(String firstName) {
		this.firstName = firstName;
	}
	public String getLastName() {
		return lastName;
	}
	public void setLastName(String lastName) {
		this.lastName = lastName;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}

}
 15  ...ciples/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/UserService.java 
@@ -0,0 +1,15 @@
package com.ramesh.ood.principles.singleresponsibility.good;

public class UserService implements IUserService {

	private EmailInfo emailInfo;
	private IEmailService emailService;
	public void registerUser(User user) {
		// save user to database
		// send mail to user for verification.

		emailInfo = new EmailInfo("some subject", "some body", user.getEmail());
		emailService = new EmailService();
		emailService.sendEmail(emailInfo);
	}
}
 BIN +47.9 KB .../ramesh/ood/principles/singleresponsibility/good/singleresponsibility_principles_good.png 
Binary file not shown.
 103  ...ramesh/ood/principles/singleresponsibility/good/singleresponsibility_principles_good.ucls 
@@ -0,0 +1,103 @@
<?xml version="1.0" encoding="UTF-8"?>
<class-diagram version="1.2.2" icons="true" automaticImage="PNG" always-add-relationships="false" generalizations="true" 
  realizations="true" associations="true" dependencies="false" nesting-relationships="true" router="FAN">  
  <interface id="1" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.IUserService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/IUserService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="561" y="73"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="2" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.UserService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/UserService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="567" y="306"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="3" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.User" project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/User.java" binary="false" 
    corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="950" y="318"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <class id="4" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.EmailInfo" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/EmailInfo.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="302" y="609"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <interface id="5" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.IEmailService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/IEmailService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="96" width="337" x="23" y="11"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </interface>  
  <class id="6" language="java" name="com.ramesh.ood.principles.singleresponsibility.good.EmailService" 
    project="ood-principles" 
    file="/ood-principles/src/main/java/com/ramesh/ood/principles/singleresponsibility/good/EmailService.java" 
    binary="false" corner="BOTTOM_RIGHT">    
    <position height="-1" width="-1" x="167" y="316"/>    
    <display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
      sort-features="false" accessors="true" visibility="true">      
      <attributes public="true" package="true" protected="true" private="true" static="true"/>      
      <operations public="true" package="true" protected="true" private="true" static="true"/>    
    </display>  
  </class>  
  <realization id="7">    
    <end type="SOURCE" refId="6"/>    
    <end type="TARGET" refId="5"/>  
  </realization>  
  <realization id="8">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="1"/>  
  </realization>  
  <association id="9">    
    <end type="SOURCE" refId="2" navigable="false">      
      <attribute id="10" name="emailInfo"/>      
      <multiplicity id="11" minimum="0" maximum="1"/>    
    </end>    
    <end type="TARGET" refId="4" navigable="true"/>    
    <display labels="true" multiplicity="true"/>  
  </association>  
  <association id="12">    
    <end type="SOURCE" refId="2" navigable="false">      
      <attribute id="13" name="emailService"/>      
      <multiplicity id="14" minimum="0" maximum="1"/>    
    </end>    
    <end type="TARGET" refId="5" navigable="true"/>    
    <display labels="true" multiplicity="true"/>  
  </association>  
  <dependency id="15">    
    <end type="SOURCE" refId="2"/>    
    <end type="TARGET" refId="3"/>  
  </dependency>  
  <classifier-display autosize="true" stereotype="true" package="true" initial-value="false" signature="true" 
    sort-features="false" accessors="true" visibility="true">    
    <attributes public="true" package="true" protected="true" private="true" static="true"/>    
    <operations public="true" package="true" protected="true" private="true" static="true"/>  
  </classifier-display>  
  <association-display labels="true" multiplicity="true"/>
</class-diagram> 
 5  oops-principles/target/classes/META-INF/MANIFEST.MF 
@@ -0,0 +1,5 @@
Manifest-Version: 1.0
Built-By: RAMESH
Build-Jdk: 1.8.0_151
Created-By: Maven Integration for Eclipse

 7  oops-principles/target/classes/META-INF/maven/com.ramesh.ood/oops-principles/pom.properties 
@@ -0,0 +1,7 @@
#Generated by Maven Integration for Eclipse
#Sun Apr 08 10:51:54 IST 2018
version=0.0.1-SNAPSHOT
groupId=com.ramesh.ood
m2e.projectName=ood-principles
m2e.projectLocation=E\:\\BLOGGER_WORK\\object-oriented-design\\oops-principles
artifactId=oops-principles
 34  oops-principles/target/classes/META-INF/maven/com.ramesh.ood/oops-principles/pom.xml 
@@ -0,0 +1,34 @@
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>com.ramesh.ood</groupId>
		<artifactId>object-oriented-design</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>
	<artifactId>oops-principles</artifactId>

	<dependencies>
		<dependency>
			<groupId>com.sun.mail</groupId>
			<artifactId>javax.mail</artifactId>
			<version>1.5.5</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<version>1.0.60</version>
			<scope>test</scope>
		</dependency>

		<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
		<dependency>
			<groupId>mysql</groupId>
			<artifactId>mysql-connector-java</artifactId>
			<version>5.1.6</version>
		</dependency>

	</dependencies>
</project> 
 BIN +2.38 KB oops-principles/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/App.class 
Binary file not shown.
 BIN +1.87 KB ...rinciples/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/Customer.class 
Binary file not shown.
 BIN +429 Bytes ...ciples/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/CustomerDao.class 
Binary file not shown.
 BIN +300 Bytes ...nciples/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/DataSource.class 
Binary file not shown.
 BIN +1.18 KB ...les/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/DatabaseConfig.class 
Binary file not shown.
 BIN +1.7 KB ...es/target/classes/com/ramesh/ood/principles/dependencyinversion/bad/MySQLDataSource.class 
Binary file not shown.
 BIN +3.56 KB ...get/classes/com/ramesh/ood/principles/dependencyinversion/bad/VoiletCustomerDaoImpl.class 
Binary file not shown.
 BIN +58 KB .../com/ramesh/ood/principles/dependencyinversion/bad/dependencyinversion_principles_bad.png 
Binary file not shown.
 BIN +4.51 KB oops-principles/target/classes/com/ramesh/ood/principles/dependencyinversion/good/App.class 
Binary file not shown.
 BIN +1.87 KB ...inciples/target/classes/com/ramesh/ood/principles/dependencyinversion/good/Customer.class 
Binary file not shown.
 BIN +432 Bytes ...iples/target/classes/com/ramesh/ood/principles/dependencyinversion/good/CustomerDao.class 
Binary file not shown.
 BIN +3.39 KB ...s/target/classes/com/ramesh/ood/principles/dependencyinversion/good/CustomerDaoImpl.class 
Binary file not shown.
 BIN +302 Bytes ...ciples/target/classes/com/ramesh/ood/principles/dependencyinversion/good/DataSource.class 
Binary file not shown.
 BIN +1.18 KB ...es/target/classes/com/ramesh/ood/principles/dependencyinversion/good/DatabaseConfig.class 
Binary file not shown.
 BIN +1.32 KB ...ples/target/classes/com/ramesh/ood/principles/dependencyinversion/good/H2DataSource.class 
Binary file not shown.
 BIN +381 Bytes ...arget/classes/com/ramesh/ood/principles/dependencyinversion/good/MSServerConnection.class 
Binary file not shown.
 BIN +1.37 KB ...s/target/classes/com/ramesh/ood/principles/dependencyinversion/good/MySQLDataSource.class 
Binary file not shown.
 BIN +48.9 KB ...om/ramesh/ood/principles/dependencyinversion/good/dependencyinversion_principles_good.png 
Binary file not shown.
 44  oops-principles/target/classes/com/ramesh/ood/principles/interfacesegregation/README.md 
@@ -0,0 +1,44 @@
*** LSP = Liskov's Substitution Principle
-----------------------------------------------

*** Description = 

	- All the time we design a program module and we create some class hierarchies. Then we extend some classes creating some derived classes. 
	  We must make sure that the new derived classes just extend without replacing the functionality of old classes. Otherwise the new classes can 
	  produce undesired effects when they are used in existing program modules. (http://www.oodesign.com/design-principles.html)

	- The Liskov Substitution Principle (LSP) applies to inheritance hierarchies, specifying that you should design your classes so that client 
	  dependencies can be substituted with subclasses without the client knowing about the change.

	- All subclasses must, therefore, operate in the same manner as their base classes. The specific functionality of the subclass may be different 
	  but must conform to the expected behavior of the base class. To be a true behavioral subtype, the subclass must not only implement the base 
	  class’s methods and properties, but also conform to its implied behavior. Basically, derived classes should never do less than their base class.

	- Sometimes code refactoring is required to fix identified LSP violations.

-----------------------------------------------

*** Examples =

(1) Media Player (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer)

	Requirement - Let's play video in list of all media players in the client program

	------ First let's see "bad" design and implementation (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer.bad)

		- Refer "MediaPlayer.java" super class and its sub classes "DivMediaPlayer.java", "VlcMediaPlayer.java"
		- Refer "ClientTestProgram.java" code till line-24, before adding "WinampMediaPlayer.java"
		- Now WinampMediaPlayer.java is added, in which LSP is violated
		- Oops, it broke "ClientTestProgram.java" code line-31

	------ How to do code-refactoring to make "good" design using LSP? (package = com.tirthal.learning.oop.design.principles.clazz.solid.lsp.mediaplayer.good)

		- Refer "MediaPlayer.java" super class and its sub class "AudioMediaPlayer.java" having play audio ability
		- Refer "VideoMediaPlayer.java" extends "MediaPlayer.java" and adds play video ability
		- Refer "DivMediaPlayer.java", "VlcMediaPlayer.java". Both extends "VideoMediaPlayer.java" for play audio and video ability.
		- Refer "WinampMediaPlayer.java" which extends "AudioMediaPlayer.java" for play audio ability.
		- So client program can substitute "VideoMediaPlayer.java" super type with "DivMediaPlayer.java" or "VlcMediaPlayer.java", but not with "WinampMediaPlayer.java"   

 -----------------------------------------------

 Feel free to contribute code for more examples in similar fashion... :-)
 BIN +1.84 KB ...target/classes/com/ramesh/ood/principles/interfacesegregation/bad/ClientTestProgram.class 
Binary file not shown.
 BIN +794 Bytes ...es/target/classes/com/ramesh/ood/principles/interfacesegregation/bad/DivMediaPlayer.class 
Binary file not shown.
 BIN +200 Bytes ...iples/target/classes/com/ramesh/ood/principles/interfacesegregation/bad/MediaPlayer.class 
Binary file not shown.
 BIN +476 Bytes ...lasses/com/ramesh/ood/principles/interfacesegregation/bad/VideoUnsupportedException.class 
Binary file not shown.
 BIN +794 Bytes ...es/target/classes/com/ramesh/ood/principles/interfacesegregation/bad/VlcMediaPlayer.class 
Binary file not shown.
 BIN +857 Bytes ...target/classes/com/ramesh/ood/principles/interfacesegregation/bad/WinampMediaPlayer.class 
Binary file not shown.
 BIN +191 Bytes ...target/classes/com/ramesh/ood/principles/interfacesegregation/good/AudioMediaPlayer.class 
Binary file not shown.
 BIN +1.77 KB ...arget/classes/com/ramesh/ood/principles/interfacesegregation/good/ClientTestProgram.class 
Binary file not shown.
 BIN +878 Bytes ...s/target/classes/com/ramesh/ood/principles/interfacesegregation/good/DivMediaPlayer.class 
Binary file not shown.
 BIN +191 Bytes ...target/classes/com/ramesh/ood/principles/interfacesegregation/good/VideoMediaPlayer.class 
Binary file not shown.
 BIN +478 Bytes ...asses/com/ramesh/ood/principles/interfacesegregation/good/VideoUnsupportedException.class 
Binary file not shown.
 BIN +878 Bytes ...s/target/classes/com/ramesh/ood/principles/interfacesegregation/good/VlcMediaPlayer.class 
Binary file not shown.
 BIN +696 Bytes ...arget/classes/com/ramesh/ood/principles/interfacesegregation/good/WinampMediaPlayer.class 
Binary file not shown.
 BIN +23.7 KB ...m/ramesh/ood/principles/interfacesegregation/good/interfacesegregation_principle_good.png 
Binary file not shown.
 BIN +1.83 KB .../target/classes/com/ramesh/ood/principles/liskovssubstitution/bad/ClientTestProgram.class 
Binary file not shown.
 BIN +412 Bytes ...les/target/classes/com/ramesh/ood/principles/liskovssubstitution/bad/DivMediaPlayer.class 
Binary file not shown.
 BIN +695 Bytes ...ciples/target/classes/com/ramesh/ood/principles/liskovssubstitution/bad/MediaPlayer.class 
Binary file not shown.
 BIN +474 Bytes ...classes/com/ramesh/ood/principles/liskovssubstitution/bad/VideoUnsupportedException.class 
Binary file not shown.
 BIN +412 Bytes ...les/target/classes/com/ramesh/ood/principles/liskovssubstitution/bad/VlcMediaPlayer.class 
Binary file not shown.
 BIN +583 Bytes .../target/classes/com/ramesh/ood/principles/liskovssubstitution/bad/WinampMediaPlayer.class 
Binary file not shown.
 BIN +19.8 KB ...s/com/ramesh/ood/principles/liskovssubstitution/bad/liskovssubstitution_principle_bad.png 
Binary file not shown.
 BIN +421 Bytes .../target/classes/com/ramesh/ood/principles/liskovssubstitution/good/AudioMediaPlayer.class 
Binary file not shown.
 BIN +1.76 KB ...target/classes/com/ramesh/ood/principles/liskovssubstitution/good/ClientTestProgram.class 
Binary file not shown.
 BIN +420 Bytes ...es/target/classes/com/ramesh/ood/principles/liskovssubstitution/good/DivMediaPlayer.class 
Binary file not shown.
 BIN +594 Bytes ...iples/target/classes/com/ramesh/ood/principles/liskovssubstitution/good/MediaPlayer.class 
Binary file not shown.
 BIN +655 Bytes .../target/classes/com/ramesh/ood/principles/liskovssubstitution/good/VideoMediaPlayer.class 
Binary file not shown.
 BIN +476 Bytes ...lasses/com/ramesh/ood/principles/liskovssubstitution/good/VideoUnsupportedException.class 
Binary file not shown.
 BIN +420 Bytes ...es/target/classes/com/ramesh/ood/principles/liskovssubstitution/good/VlcMediaPlayer.class 
Binary file not shown.
 BIN +429 Bytes ...target/classes/com/ramesh/ood/principles/liskovssubstitution/good/WinampMediaPlayer.class 
Binary file not shown.
 BIN +683 Bytes ...inciples/target/classes/com/ramesh/ood/principles/openclosed/bad/ConnectionProvider.class 
Binary file not shown.
 BIN +264 Bytes ...nciples/target/classes/com/ramesh/ood/principles/openclosed/bad/IConnectionProvider.class 
Binary file not shown.
 BIN +9.59 KB ...ples/target/classes/com/ramesh/ood/principles/openclosed/bad/openclosed_principle_bad.png 
Binary file not shown.
 BIN +543 Bytes ...iples/target/classes/com/ramesh/ood/principles/openclosed/good/H2ConnectionProvider.class 
Binary file not shown.
 BIN +215 Bytes ...nciples/target/classes/com/ramesh/ood/principles/openclosed/good/IConnetionProvider.class 
Binary file not shown.
 BIN +561 Bytes ...target/classes/com/ramesh/ood/principles/openclosed/good/MsServerConnectionProvider.class 
Binary file not shown.
 BIN +552 Bytes ...es/target/classes/com/ramesh/ood/principles/openclosed/good/MySQLConnectionProvider.class 
Binary file not shown.
 BIN +555 Bytes ...s/target/classes/com/ramesh/ood/principles/openclosed/good/OracleConnectionProvider.class 
Binary file not shown.
 BIN +16 KB ...es/target/classes/com/ramesh/ood/principles/openclosed/good/openclosed_principle_good.png 
Binary file not shown.
 BIN +242 Bytes ...ples/target/classes/com/ramesh/ood/principles/singleresponsibility/bad/IUserService.class 
Binary file not shown.
 BIN +983 Bytes oops-principles/target/classes/com/ramesh/ood/principles/singleresponsibility/bad/User.class 
Binary file not shown.
 BIN +1.05 KB ...les/target/classes/com/ramesh/ood/principles/singleresponsibility/bad/UserService$1.class 
Binary file not shown.
 BIN +3.39 KB ...iples/target/classes/com/ramesh/ood/principles/singleresponsibility/bad/UserService.class 
Binary file not shown.
 BIN +20.9 KB ...om/ramesh/ood/principles/singleresponsibility/bad/singleresponsibility_principles_bad.png 
Binary file not shown.
 BIN +1.08 KB ...ciples/target/classes/com/ramesh/ood/principles/singleresponsibility/good/EmailInfo.class 
Binary file not shown.
 BIN +1.01 KB ...s/target/classes/com/ramesh/ood/principles/singleresponsibility/good/EmailService$1.class 
Binary file not shown.
 BIN +3.37 KB ...les/target/classes/com/ramesh/ood/principles/singleresponsibility/good/EmailService.class 
Binary file not shown.
 BIN +248 Bytes ...es/target/classes/com/ramesh/ood/principles/singleresponsibility/good/IEmailService.class 
Binary file not shown.
 BIN +244 Bytes ...les/target/classes/com/ramesh/ood/principles/singleresponsibility/good/IUserService.class 
Binary file not shown.
 BIN +985 Bytes ...-principles/target/classes/com/ramesh/ood/principles/singleresponsibility/good/User.class 
Binary file not shown.
 BIN +1.38 KB ...ples/target/classes/com/ramesh/ood/principles/singleresponsibility/good/UserService.class 
Binary file not shown.
 BIN +47.9 KB .../ramesh/ood/principles/singleresponsibility/good/singleresponsibility_principles_good.png 
Binary file not shown.
 11  pom.xml 
@@ -0,0 +1,11 @@
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.ramesh.ood</groupId>
  <artifactId>object-oriented-design</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <packaging>pom</packaging>
  <modules>
  	<module>oops-concepts</module>
  	<module>oops-principles</module>
  </modules>
</project> 
0 comments on commit cf5ea46
@dinakardinu
 
 
Leave a comment
Attach files to your comment
Attach files by dragging & dropping, selecting or pasting them.
 
 You’re not receiving notifications from this thread.
© 2020 GitHub, Inc.
Terms
Privacy
Security
Status
Help
Contact GitHub
Pricing
API
Training
Blog
About
